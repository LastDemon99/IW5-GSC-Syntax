/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var codscript = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[11,15,23,103],$V1=[1,16],$V2=[1,17],$V3=[1,18],$V4=[17,24],$V5=[5,13,17,24,34,37,48,49,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,92],$V6=[4,5,6,8,9,12,13,16,19,21,23,28,33,35,37,39,46,48,49,51,52,53,54,80,82,85,87,89,91,93,95,96,97,98],$V7=[2,112],$V8=[1,81],$V9=[1,82],$Va=[1,77],$Vb=[1,54],$Vc=[1,59],$Vd=[1,43],$Ve=[1,72],$Vf=[1,83],$Vg=[1,85],$Vh=[1,78],$Vi=[1,71],$Vj=[1,80],$Vk=[1,64],$Vl=[1,65],$Vm=[1,66],$Vn=[1,67],$Vo=[1,68],$Vp=[1,69],$Vq=[1,70],$Vr=[1,53],$Vs=[1,44],$Vt=[1,46],$Vu=[1,47],$Vv=[1,48],$Vw=[1,49],$Vx=[1,50],$Vy=[1,51],$Vz=[1,52],$VA=[1,40],$VB=[1,41],$VC=[13,17,24,34],$VD=[2,85],$VE=[1,119],$VF=[1,108],$VG=[1,104],$VH=[1,105],$VI=[1,109],$VJ=[1,110],$VK=[1,106],$VL=[1,107],$VM=[1,111],$VN=[1,112],$VO=[1,113],$VP=[1,114],$VQ=[1,115],$VR=[1,116],$VS=[1,117],$VT=[1,118],$VU=[1,120],$VV=[1,121],$VW=[1,122],$VX=[1,123],$VY=[1,124],$VZ=[1,125],$V_=[1,126],$V$=[1,127],$V01=[1,128],$V11=[1,129],$V21=[1,130],$V31=[5,13,17,24,34,37,48,49,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$V41=[1,138],$V51=[1,136],$V61=[1,137],$V71=[1,140],$V81=[4,5,6,8,9,12,16,23,28,33,35,37,39,46,48,49,51,52,53,54],$V91=[5,12,13,17,23,24,28,33,34,35,37,39,40,48,49,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$Va1=[1,142],$Vb1=[2,40],$Vc1=[1,167],$Vd1=[2,14],$Ve1=[5,13,16,17,24,34,37,48,49,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],$Vf1=[1,190];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"StringLiteral":3,"STRING_LITERAL":4,"&":5,"#":6,"NumericLiteral":7,"INTEGER_LITERAL":8,"FLOAT_LITERAL":9,"IncludeDirective":10,"INCLUDE":11,"FILEPATH":12,";":13,"AnimtreeDirective":14,"USING_ANIMTREE":15,"(":16,")":17,"Block":18,"{":19,"StatementList":20,"}":21,"FormalParameterList":22,"IDENTIFIER":23,",":24,"FunctionParameterList":25,"Expression":26,"FunctionCall":27,"THREAD":28,"PointerExpression":29,"ReferenceExpression":30,"FunctionExpression":31,"ObjectExpression":32,"FUNC_POINTER_BEGIN":33,"]":34,"::":35,"AnimReferenceExpression":36,"%":37,"MemberExpression":38,"[":39,".":40,"ElementList":41,"ListExpression":42,"LiteralExpression":43,"OptionalExpression":44,"BasicExpression":45,"ANIMTREE":46,"OperatorPostfix":47,"++":48,"--":49,"OperatorPrefix":50,"+":51,"-":52,"~":53,"!":54,"OperatorMid":55,"*":56,"/":57,"<<":58,">>":59,"<":60,"<=":61,">":62,">=":63,"==":64,"!=":65,"|":66,"&&":67,"||":68,"=":69,"+=":70,"-=":71,"*=":72,"/=":73,"&=":74,"^=":75,"|=":76,"e":77,"ExpressionStatement":78,"ReturnStatement":79,"RETURN":80,"WaitStatement":81,"WAIT":82,"EmptyStatement":83,"IfStatement":84,"IF":85,"Statement":86,"ELSE":87,"SwitchStatement":88,"SWITCH":89,"CaseStatement":90,"CASE":91,":":92,"DEFAULT":93,"LoopStatement":94,"WHILE":95,"FOR":96,"BREAK":97,"CONTINUE":98,"FunctionDeclaration":99,"SourceElement":100,"SourceElements":101,"Program":102,"EOF":103,"$accept":0,"$end":1},
terminals_: {2:"error",4:"STRING_LITERAL",5:"&",6:"#",8:"INTEGER_LITERAL",9:"FLOAT_LITERAL",11:"INCLUDE",12:"FILEPATH",13:";",15:"USING_ANIMTREE",16:"(",17:")",19:"{",21:"}",23:"IDENTIFIER",24:",",28:"THREAD",33:"FUNC_POINTER_BEGIN",34:"]",35:"::",37:"%",39:"[",40:".",46:"ANIMTREE",48:"++",49:"--",51:"+",52:"-",53:"~",54:"!",56:"*",57:"/",58:"<<",59:">>",60:"<",61:"<=",62:">",63:">=",64:"==",65:"!=",66:"|",67:"&&",68:"||",69:"=",70:"+=",71:"-=",72:"*=",73:"/=",74:"&=",75:"^=",76:"|=",80:"RETURN",82:"WAIT",85:"IF",87:"ELSE",89:"SWITCH",91:"CASE",92:":",93:"DEFAULT",95:"WHILE",96:"FOR",97:"BREAK",98:"CONTINUE",103:"EOF"},
productions_: [0,[3,1],[3,2],[3,2],[7,1],[7,1],[10,3],[14,5],[18,3],[22,1],[22,3],[22,0],[25,1],[25,3],[25,0],[27,4],[27,5],[27,4],[27,5],[27,4],[27,5],[31,2],[31,1],[29,4],[29,4],[30,3],[30,2],[36,2],[38,4],[38,3],[38,2],[41,3],[41,3],[42,3],[32,1],[32,1],[32,1],[43,1],[43,1],[44,1],[44,0],[45,1],[45,1],[45,1],[45,1],[45,1],[47,1],[47,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[77,1],[77,2],[77,2],[77,3],[77,1],[77,3],[26,1],[78,2],[79,2],[79,3],[81,3],[81,5],[83,1],[84,5],[84,6],[84,2],[88,5],[90,3],[90,2],[94,5],[94,9],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,2],[86,2],[86,1],[20,2],[20,0],[99,7],[100,1],[100,1],[100,1],[101,2],[101,0],[102,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			this.$ = $$[$0].substring(1, $$[$0].length-1);
		
break;
case 2: case 3:

			this.$ = $$[$0-1].substring(2, $$[$0-1].length-1);
		
break;
case 6:
this.$ = {"type": "include", "arg": $$[$0-1], "range": this._$};
break;
case 7:
this.$ = {"type": "animtree", "arg": $$[$0-2], "range": this._$};
break;
case 8:
this.$ = {"type": "block", "statements": $$[$0-1], "range": this._$};;
break;
case 9: case 12:

			this.$ = [$$[$0]];
		
break;
case 10: case 13: case 32:

			this.$ = $$[$0-2].concat($$[$0]);
		
break;
case 11: case 14: case 40: case 118:

			this.$ = [];
		
break;
case 15: case 17:
this.$ = {"type": "call", "name": $$[$0-3], "params": $$[$0-1]};;
break;
case 16:
this.$ = {"type": "thread", "name": $$[$0-4], "params": $$[$0-1]};;
break;
case 18:
this.$ = {"type": "call", "name": $$[$0-4], "params": $$[$0-2]};;
break;
case 19: case 20:
this.$ = {"type": "call_external", "file": $$[$0-3].file, "name": $$[$0-3].name, "params": $$[$0-1]};;
break;
case 21:

			this.$ = $$[$0];
			this.$.caller = $$[$0-1];	
		
break;
case 23: case 24:
this.$ = {"type": "pointer", "expression": $$[$0-2]};;
break;
case 25:
this.$ = {"type": "reference", "file": $$[$0-2], "name": $$[$0]};;
break;
case 26:
this.$ = {"type": "reference", "file": "$this", "name": $$[$0]};;
break;
case 27:
this.$ = {"type": "reference", "name": $$[$0]};;
break;
case 28:
this.$ = {"type": "array", "expression": $$[$0-3], "member": $$[$0-1]};
break;
case 29:
this.$ = {"type": "property", "expression": $$[$0-2], "member": $$[$0]};
break;
case 31:

			this.$ = [$$[$0-2], $$[$0]];
		
break;
case 33:
this.$ = {"type": "list", "elements": $$[$0-1]};
break;
case 80:
this.$ = {"type": "expression", "left": $$[$0-1], "operator": $$[$0]};;
break;
case 81:
this.$ = {"type": "expression", "operator": $$[$0-1], "right": $$[$0]};;
break;
case 82:
this.$ = {"type": "expression", "left": $$[$0-2], "operator": $$[$0-1], "right": $$[$0]};;
break;
case 84:
this.$ = {"type": "expression", "parentheses": true, "expression": $$[$0-1]}; //used for debugging;
break;
case 86:

			this.$ = $$[$0-1];
		
break;
case 87:
this.$ = {"type": "return", "range": this._$};;
break;
case 88:
this.$ = {"type": "return", "expression": $$[$0-1], "range": this._$};;
break;
case 89:
this.$ = {"type": "wait", "expression": $$[$0-1], "range": this._$};;
break;
case 90:
this.$ = {"type": "wait", "expression": $$[$0-2], "range": this._$};;
break;
case 92:
this.$ = {"type": "if", "expression": $$[$0-2], "statement": $$[$0], "range": this._$};;
break;
case 93:
this.$ = {"type": "elif", "expression": $$[$0-2], "statement": $$[$0], "range": this._$};;
break;
case 94:
this.$ = {"type": "else", "statement": $$[$0], "range": this._$};;
break;
case 95:
this.$ = {"type": "switch", "expression": $$[$0-2], "statement": $$[$0], "range": this._$};;
break;
case 96:
this.$ = {"type": "case", "expression": $$[$0-1], "range": this._$};;
break;
case 97:
this.$ = {"type": "default", "expression": $$[$0-1], "range": this._$};;
break;
case 98:
this.$ = {"type": "while", "expression": $$[$0-2], "statement": $$[$0], "range": this._$};;
break;
case 99:
this.$ = {"type": "for", "expressions": [$$[$0-6],$$[$0-4],$$[$0-2]], "statement": $$[$0], "range": this._$};;
break;
case 111:

			this.$ = $$[$0-1].concat($$[$0]);
		
break;
case 112:

			this.$ = [];	
		
break;
case 113:
this.$ = {"type": "function", "name": $$[$0-6], "params": $$[$0-4], "range": this._$, "statements": $$[$0-1]};;
break;
case 117:

            this.$ = $$[$0-1].concat($$[$0]);
		
break;
case 119:

		return this.$;
	
break;
}
},
table: [o($V0,[2,118],{102:1,101:2}),{1:[3]},{10:5,11:[1,8],14:6,15:[1,9],23:[1,10],99:7,100:4,103:[1,3]},{1:[2,119]},o($V0,[2,117]),o($V0,[2,114]),o($V0,[2,115]),o($V0,[2,116]),{12:[1,11]},{16:[1,12]},{16:[1,13]},{13:[1,14]},{3:15,4:$V1,5:$V2,6:$V3},o($V4,[2,11],{22:19,23:[1,20]}),o($V0,[2,6]),{17:[1,21]},o($V5,[2,1]),{4:[1,22]},{4:[1,23]},{17:[1,24],24:[1,25]},o($V4,[2,9]),{13:[1,26]},o($V5,[2,2]),o($V5,[2,3]),{19:[1,27]},{23:[1,28]},o($V0,[2,7]),o($V6,$V7,{20:29}),o($V4,[2,10]),{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,13:$Vb,16:$Vc,18:32,19:$Vd,21:[1,30],23:$Ve,26:45,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55,78:34,79:39,80:$Vr,81:33,82:$Vs,83:42,84:35,85:$Vt,86:31,87:$Vu,88:36,89:$Vv,90:37,91:$Vw,93:$Vx,94:38,95:$Vy,96:$Vz,97:$VA,98:$VB},o($V0,[2,113]),o($V6,[2,111]),o($V6,[2,100]),o($V6,[2,101]),o($V6,[2,102]),o($V6,[2,103]),o($V6,[2,104]),o($V6,[2,105]),o($V6,[2,106]),o($V6,[2,107]),{13:[1,86]},{13:[1,87]},o($V6,[2,110]),o($V6,$V7,{20:88}),{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,16:[1,90],23:$Ve,26:89,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55},{13:[1,91]},{16:[1,92]},{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,13:$Vb,16:$Vc,18:32,19:$Vd,23:$Ve,26:45,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55,78:34,79:39,80:$Vr,81:33,82:$Vs,83:42,84:35,85:[1,93],86:94,87:$Vu,88:36,89:$Vv,90:37,91:$Vw,93:$Vx,94:38,95:$Vy,96:$Vz,97:$VA,98:$VB},{16:[1,95]},{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,43:96},{92:[1,97]},{16:[1,98]},{16:[1,99]},{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,13:[1,100],16:$Vc,23:$Ve,26:101,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55},o($V6,[2,91]),o($VC,$VD,{47:102,55:103,5:$VE,37:$VF,48:$VG,49:$VH,51:$VI,52:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21}),o($V31,[2,79]),{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:131},o($V31,[2,83]),{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,26:134,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,41:133,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:132},o($V31,[2,41],{29:84,27:135,30:139,12:$Va,23:$V41,28:$Vf,33:$Vg,35:$Vh,39:$V51,40:$V61}),o($V31,[2,42]),o($V31,[2,43]),o($V31,[2,44],{16:$V71}),o($V31,[2,45]),o($V81,[2,48]),o($V81,[2,49]),o($V81,[2,50]),o($V81,[2,51]),o($V81,[2,52]),o($V81,[2,53]),{23:[1,141]},o($V91,[2,34],{16:$Va1}),o($V91,[2,35]),o($V91,[2,36]),o($V5,[2,37]),o($V5,[2,38]),{35:[1,143]},{23:[1,144]},o($V91,[2,22]),{34:[1,145]},o($V5,[2,4]),o($V5,[2,5]),{12:$Va,23:[1,146],29:147,30:148,33:$Vg,35:$Vh},{16:[1,149]},{12:$Va,23:$Ve,27:79,28:$Vf,29:84,30:151,31:73,32:150,33:$Vg,35:$Vh,38:74,39:$Vj},o($V6,[2,108]),o($V6,[2,109]),{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,13:$Vb,16:$Vc,18:32,19:$Vd,21:[1,152],23:$Ve,26:45,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55,78:34,79:39,80:$Vr,81:33,82:$Vs,83:42,84:35,85:$Vt,86:31,87:$Vu,88:36,89:$Vv,90:37,91:$Vw,93:$Vx,94:38,95:$Vy,96:$Vz,97:$VA,98:$VB},{13:[1,153]},{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,26:154,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,41:133,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:132},o($V6,[2,86]),{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,26:155,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55},{16:[1,156]},o($V6,[2,94]),{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,26:157,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55},{92:[1,158]},o($V6,[2,97]),{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,26:159,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55},{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,13:$Vb1,16:$Vc,23:$Ve,26:161,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,44:160,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55},o($V6,[2,87]),{13:[1,162]},o($V31,[2,80]),{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:163},o($V31,[2,46]),o($V31,[2,47]),o($V81,[2,54]),o($V81,[2,55]),o($V81,[2,56]),o($V81,[2,57]),o($V81,[2,58]),o($V81,[2,59]),o($V81,[2,60]),o($V81,[2,61]),o($V81,[2,62]),o($V81,[2,63]),o($V81,[2,64]),o($V81,[2,65]),o($V81,[2,66]),o($V81,[2,67]),o($V81,[2,68]),o($V81,[2,69]),o($V81,[2,70]),o($V81,[2,71]),o($V81,[2,72]),o($V81,[2,73]),o($V81,[2,74]),o($V81,[2,75]),o($V81,[2,76]),o($V81,[2,77]),o($V81,[2,78]),o($VC,[2,81],{47:102,55:103,5:$VE,37:$VF,48:$VG,49:$VH,51:$VI,52:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21}),{5:$VE,17:[1,164],24:$VD,37:$VF,47:102,48:$VG,49:$VH,51:$VI,52:$VJ,55:103,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21},{17:[1,165],24:[1,166]},{24:$Vc1},o($V91,[2,21]),{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,26:168,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55},{12:$Va,23:$Ve,27:79,28:$Vf,29:84,30:139,31:73,32:169,33:$Vg,35:$Vh,38:74,39:$Vj},{16:$Va1},{16:$V71},o($V4,$Vd1,{77:55,45:56,50:57,36:58,32:60,43:61,42:62,30:63,31:73,38:74,7:75,3:76,27:79,29:84,25:170,26:171,4:$V1,5:$V2,6:$V3,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,28:$Vf,33:$Vg,35:$Vh,37:$Vi,39:$Vj,46:$Vk,48:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq}),o($V31,[2,27]),o($V4,$Vd1,{77:55,45:56,50:57,36:58,32:60,43:61,42:62,30:63,31:73,38:74,7:75,3:76,27:79,29:84,26:171,25:172,4:$V1,5:$V2,6:$V3,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,28:$Vf,33:$Vg,35:$Vh,37:$Vi,39:$Vj,46:$Vk,48:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq}),{23:[1,173]},o($Ve1,[2,26]),o($V91,[2,30]),{16:[1,174]},{16:[1,175]},{16:[1,176]},o($V4,$Vd1,{77:55,45:56,50:57,36:58,32:60,43:61,42:62,30:63,31:73,38:74,7:75,3:76,27:79,29:84,26:171,25:177,4:$V1,5:$V2,6:$V3,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,28:$Vf,33:$Vg,35:$Vh,37:$Vi,39:$Vj,46:$Vk,48:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq}),{12:$Va,23:$V41,27:135,28:$Vf,29:84,30:139,33:$Vg,34:[1,178],35:$Vh,39:$V51,40:$V61},{16:$V71,34:[1,179]},o($V6,[2,8]),o($V6,[2,89]),{17:[1,180],24:$Vc1},{17:[1,181]},{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,26:182,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55},{17:[1,183]},o($V6,[2,96]),{17:[1,184]},{13:[1,185]},o([13,17],[2,39]),o($V6,[2,88]),o($VC,[2,82],{47:102,55:103,5:$VE,37:$VF,48:$VG,49:$VH,51:$VI,52:$VJ,56:$VK,57:$VL,58:$VM,59:$VN,60:$VO,61:$VP,62:$VQ,63:$VR,64:$VS,65:$VT,66:$VU,67:$VV,68:$VW,69:$VX,70:$VY,71:$VZ,72:$V_,73:$V$,74:$V01,75:$V11,76:$V21}),o($V31,[2,84]),o($V31,[2,33]),{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,26:186,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55},{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,26:187,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55},{34:[1,188]},o([5,13,17,24,34,37,39,40,48,49,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],[2,29],{29:84,27:135,30:139,12:$Va,23:$V41,28:$Vf,33:$Vg,35:$Vh}),{17:[1,189],24:$Vf1},o($V4,[2,12]),{17:[1,191],24:$Vf1},o($Ve1,[2,25]),o($V4,$Vd1,{77:55,45:56,50:57,36:58,32:60,43:61,42:62,30:63,31:73,38:74,7:75,3:76,27:79,29:84,26:171,25:192,4:$V1,5:$V2,6:$V3,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,28:$Vf,33:$Vg,35:$Vh,37:$Vi,39:$Vj,46:$Vk,48:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq}),o($V4,$Vd1,{77:55,45:56,50:57,36:58,32:60,43:61,42:62,30:63,31:73,38:74,7:75,3:76,27:79,29:84,26:171,25:193,4:$V1,5:$V2,6:$V3,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,28:$Vf,33:$Vg,35:$Vh,37:$Vi,39:$Vj,46:$Vk,48:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq}),o($V4,$Vd1,{77:55,45:56,50:57,36:58,32:60,43:61,42:62,30:63,31:73,38:74,7:75,3:76,27:79,29:84,26:171,25:194,4:$V1,5:$V2,6:$V3,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,28:$Vf,33:$Vg,35:$Vh,37:$Vi,39:$Vj,46:$Vk,48:$Vl,49:$Vm,51:$Vn,52:$Vo,53:$Vp,54:$Vq}),{17:[1,195],24:$Vf1},{34:[1,196]},{34:[1,197]},{13:[1,198]},{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,13:$Vb,16:$Vc,18:32,19:$Vd,23:$Ve,26:45,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55,78:34,79:39,80:$Vr,81:33,82:$Vs,83:42,84:35,85:$Vt,86:199,87:$Vu,88:36,89:$Vv,90:37,91:$Vw,93:$Vx,94:38,95:$Vy,96:$Vz,97:$VA,98:$VB},{17:[1,200]},{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,13:$Vb,16:$Vc,18:32,19:$Vd,23:$Ve,26:45,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55,78:34,79:39,80:$Vr,81:33,82:$Vs,83:42,84:35,85:$Vt,86:201,87:$Vu,88:36,89:$Vv,90:37,91:$Vw,93:$Vx,94:38,95:$Vy,96:$Vz,97:$VA,98:$VB},{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,13:$Vb,16:$Vc,18:32,19:$Vd,23:$Ve,26:45,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55,78:34,79:39,80:$Vr,81:33,82:$Vs,83:42,84:35,85:$Vt,86:202,87:$Vu,88:36,89:$Vv,90:37,91:$Vw,93:$Vx,94:38,95:$Vy,96:$Vz,97:$VA,98:$VB},{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,13:$Vb1,16:$Vc,23:$Ve,26:161,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,44:203,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55},o($V4,[2,32]),o($V4,[2,31]),o($V91,[2,28]),o($V91,[2,19]),{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,16:$Vc,23:$Ve,26:204,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55},o($V91,[2,15]),{17:[1,205],24:$Vf1},{17:[1,206],24:$Vf1},{17:[1,207],24:$Vf1},o($V91,[2,17]),{16:[2,23]},{16:[2,24]},o($V6,[2,90]),o($V6,[2,92]),{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,13:$Vb,16:$Vc,18:32,19:$Vd,23:$Ve,26:45,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55,78:34,79:39,80:$Vr,81:33,82:$Vs,83:42,84:35,85:$Vt,86:208,87:$Vu,88:36,89:$Vv,90:37,91:$Vw,93:$Vx,94:38,95:$Vy,96:$Vz,97:$VA,98:$VB},o($V6,[2,95]),o($V6,[2,98]),{13:[1,209]},o($V4,[2,13]),o($V91,[2,16]),o($V91,[2,18]),o($V91,[2,20]),o($V6,[2,93]),{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,16:$Vc,17:$Vb1,23:$Ve,26:161,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,44:210,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55},{17:[1,211]},{3:76,4:$V1,5:$V2,6:$V3,7:75,8:$V8,9:$V9,12:$Va,13:$Vb,16:$Vc,18:32,19:$Vd,23:$Ve,26:45,27:79,28:$Vf,29:84,30:63,31:73,32:60,33:$Vg,35:$Vh,36:58,37:$Vi,38:74,39:$Vj,42:62,43:61,45:56,46:$Vk,48:$Vl,49:$Vm,50:57,51:$Vn,52:$Vo,53:$Vp,54:$Vq,77:55,78:34,79:39,80:$Vr,81:33,82:$Vs,83:42,84:35,85:$Vt,86:212,87:$Vu,88:36,89:$Vv,90:37,91:$Vw,93:$Vx,94:38,95:$Vy,96:$Vz,97:$VA,98:$VB},o($V6,[2,99])],
defaultActions: {3:[2,119],196:[2,23],197:[2,24]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip single line comments */	
break;
case 2:/* skip block comment */
break;
case 3:/* skip devscript (for now) */
break;
case 4:return 4
break;
case 5:return 9
break;
case 6:return 8
break;
case 7:return 11
break;
case 8:return 15
break;
case 9:return 46
break;
case 10:return 16
break;
case 11:return 17
break;
case 12:return 33
break;
case 13:return 39
break;
case 14:return 34
break;
case 15:return 19
break;
case 16:return 21
break;
case 17:return 24
break;
case 18:return 40
break;
case 19:return 65
break;
case 20:return 54
break;
case 21:return 37
break;
case 22:return 64
break;
case 23:return 69
break;
case 24:return 58
break;
case 25:return 61
break;
case 26:return 60
break;
case 27:return 59
break;
case 28:return 63
break;
case 29:return 62
break;
case 30:return 48
break;
case 31:return 70
break;
case 32:return 51
break;
case 33:return 49
break;
case 34:return 71
break;
case 35:return 52
break;
case 36:return 72
break;
case 37:return 56
break;
case 38:return 73
break;
case 39:return 57
break;
case 40:return 68
break;
case 41:return 76
break;
case 42:return 66
break;
case 43:return 67
break;
case 44:return 74
break;
case 45:return 5
break;
case 46:return 75
break;
case 47:return '^'
break;
case 48:return 53
break;
case 49:return 35
break;
case 50:return 92
break;
case 51:return 13
break;
case 52:return '?'
break;
case 53:return 6
break;
case 54:return 85
break;
case 55:return 87
break;
case 56:return 89
break;
case 57:return 91
break;
case 58:return 93
break;
case 59:return 97
break;
case 60:return 96
break;
case 61:return 95
break;
case 62:return 98
break;
case 63:return 80
break;
case 64:return 28
break;
case 65:return 82
break;
case 66:return 12
break;
case 67:return 23
break;
case 68:return 103
break;
case 69:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:\/#(.|\n|\r)*?#\/)/,/^(?:("(?:\\.|[^\"])*?"|'(?:\\.|[^\'])*?'))/,/^(?:\d+\.(?:\d*)?f?|\.\d+f?)/,/^(?:\d+)/,/^(?:#include\b)/,/^(?:#using_animtree\b)/,/^(?:#animtree\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[\s*\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:!=)/,/^(?:!)/,/^(?:%)/,/^(?:==)/,/^(?:=)/,/^(?:<<)/,/^(?:<=)/,/^(?:<)/,/^(?:>>)/,/^(?:>=)/,/^(?:>)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:--)/,/^(?:-=)/,/^(?:-)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:\|\|)/,/^(?:\|=)/,/^(?:\|)/,/^(?:&&)/,/^(?:&=)/,/^(?:&)/,/^(?:\^=)/,/^(?:\^)/,/^(?:~)/,/^(?:::)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:#)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:break\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:thread\b)/,/^(?:wait\b)/,/^(?:(\w+\\)+\w+)/,/^(?:(_?[a-zA-Z\-_]\w*))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = codscript;
exports.Parser = codscript.Parser;
exports.parse = function () { return codscript.parse.apply(codscript, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}