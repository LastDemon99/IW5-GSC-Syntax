/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var codscript = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[10,14,22,85],$V1=[1,16],$V2=[1,17],$V3=[16,23],$V4=[12,16,23,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64],$V5=[4,5,7,8,11,12,15,18,20,22,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,72,75,77,79,80],$V6=[2,89],$V7=[37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],$V8=[2,19],$V9=[1,60],$Va=[1,61],$Vb=[1,62],$Vc=[1,42],$Vd=[1,58],$Ve=[1,35],$Vf=[1,46],$Vg=[1,52],$Vh=[1,53],$Vi=[1,54],$Vj=[1,55],$Vk=[1,56],$Vl=[1,57],$Vm=[1,41],$Vn=[1,37],$Vo=[1,38],$Vp=[1,39],$Vq=[1,40],$Vr=[31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],$Vs=[2,21],$Vt=[1,72],$Vu=[12,16,23,64],$Vv=[2,72],$Vw=[1,74],$Vx=[1,75],$Vy=[1,79],$Vz=[1,80],$VA=[1,76],$VB=[1,77],$VC=[1,78],$VD=[1,81],$VE=[1,82],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[1,87],$VK=[1,88],$VL=[1,89],$VM=[1,90],$VN=[1,91],$VO=[1,92],$VP=[1,93],$VQ=[1,94],$VR=[1,95],$VS=[1,96],$VT=[1,97],$VU=[1,98],$VV=[1,99],$VW=[1,100],$VX=[1,101],$VY=[12,16,23,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,63,64,65],$VZ=[2,62],$V_=[1,104],$V$=[1,105],$V01=[1,103],$V11=[12,16,23,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64],$V21=[16,23,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],$V31=[16,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],$V41=[12,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],$V51=[2,69],$V61=[2,13],$V71=[12,16,23,31,32,37,38,39,64],$V81=[12,16,23,31,32,33,34,37,38,39,64],$V91=[12,16,23,31,32,33,34,37,38,39,40,41,64],$Va1=[12,16,23,31,32,33,34,37,38,39,40,41,42,43,44,45,64],$Vb1=[12,16,23,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,64],$Vc1=[12,16,23,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,64],$Vd1=[1,170],$Ve1=[2,60],$Vf1=[2,59],$Vg1=[2,12];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"StringLiteral":3,"STRING_LITERAL":4,"STRING_LOCALIZED_LITERAL":5,"NumericLiteral":6,"INTEGER_LITERAL":7,"FLOAT_LITERAL":8,"IncludeDirective":9,"INCLUDE":10,"FILEPATH":11,";":12,"AnimtreeDirective":13,"USING_ANIMTREE":14,"(":15,")":16,"Block":17,"{":18,"StatementList":19,"}":20,"FormalParameterList":21,"IDENTIFIER":22,",":23,"FunctionParameterList":24,"Expression":25,"FunctionCall":26,"::":27,"FunctionExpression":28,"THREAD":29,"e":30,"++":31,"--":32,"+":33,"-":34,"!":35,"~":36,"*":37,"/":38,"%":39,"<<":40,">>":41,"<":42,"<=":43,">":44,">=":45,"==":46,"!=":47,"&":48,"^":49,"|":50,"&&":51,"||":52,"=":53,"+=":54,"-=":55,"*=":56,"/=":57,"&=":58,"^=":59,"|=":60,"MemberExpression":61,"NonLiteralExpression":62,"[":63,"]":64,".":65,"ElementList":66,"ListExpression":67,"LiteralExpression":68,"OptionalExpression":69,"ExpressionStatement":70,"ReturnStatement":71,"RETURN":72,"EmptyStatement":73,"IfStatement":74,"IF":75,"Statement":76,"ELSE":77,"LoopStatement":78,"WHILE":79,"FOR":80,"FunctionDeclaration":81,"SourceElement":82,"SourceElements":83,"Program":84,"EOF":85,"$accept":0,"$end":1},
terminals_: {2:"error",4:"STRING_LITERAL",5:"STRING_LOCALIZED_LITERAL",7:"INTEGER_LITERAL",8:"FLOAT_LITERAL",10:"INCLUDE",11:"FILEPATH",12:";",14:"USING_ANIMTREE",15:"(",16:")",18:"{",20:"}",22:"IDENTIFIER",23:",",27:"::",29:"THREAD",31:"++",32:"--",33:"+",34:"-",35:"!",36:"~",37:"*",38:"/",39:"%",40:"<<",41:">>",42:"<",43:"<=",44:">",45:">=",46:"==",47:"!=",48:"&",49:"^",50:"|",51:"&&",52:"||",53:"=",54:"+=",55:"-=",56:"*=",57:"/=",58:"&=",59:"^=",60:"|=",63:"[",64:"]",65:".",72:"RETURN",75:"IF",77:"ELSE",79:"WHILE",80:"FOR",85:"EOF"},
productions_: [0,[3,1],[3,1],[6,1],[6,1],[9,3],[13,5],[17,3],[21,1],[21,3],[21,0],[24,1],[24,3],[24,0],[26,4],[26,6],[28,1],[28,2],[28,3],[30,0],[30,1],[30,1],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[61,4],[61,3],[66,3],[66,3],[67,3],[62,1],[62,1],[62,1],[62,1],[68,1],[68,1],[69,1],[69,0],[25,1],[25,1],[25,1],[70,2],[71,2],[71,3],[73,1],[74,5],[74,6],[74,5],[78,5],[78,9],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[19,2],[19,0],[81,7],[82,1],[82,1],[82,1],[83,2],[83,0],[84,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			this.$ = $$[$0].substring(1, $$[$0].length-1);
		
break;
case 2:

			this.$ = $$[$0].substring(2, $$[$0].length-1);
		
break;
case 5:
this.$ = {"type": "include", "arg": $$[$0-1], "range": this._$};
break;
case 6:
this.$ = {"type": "animtree", "arg": $$[$0-2], "range": this._$};
break;
case 7:
this.$ = {"type": "block", "content": $$[$0-1], "range": this._$};;
break;
case 8: case 11:

			this.$ = [$$[$0]];
		
break;
case 9: case 12: case 60:

			this.$ = $$[$0-2].concat($$[$0]);
		
break;
case 10: case 13: case 69: case 95:

			this.$ = [];
		
break;
case 14:
this.$ = {"type": "call", "name": $$[$0-3], "params": $$[$0-1]};;
break;
case 15:
this.$ = {"type": "call_external", "file": $$[$0-5], "name": $$[$0-3], "params": $$[$0-1]};;
break;
case 17:

			this.$ = $$[$0];
			this.$.caller = $$[$0-1];	
		
break;
case 18:

			this.$ = $$[$0]
			this.$.caller = $$[$0-2]
			this.$.type = "call_thread";
		
break;
case 22: case 23:
this.$ = {"A": $$[$0-1], "Postfix Op": $$[$0]};;
break;
case 24: case 25: case 26: case 27: case 28: case 29:
this.$ = {"A": $$[$0-1], "Prefix Op": $$[$0]};;
break;
case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55:
this.$ = {"A": $$[$0-2], "Op": $$[$0-1], "B": $$[$0]};;
break;
case 56:
this.$ = {"A": $$[$0-2], "PARENS": $$[$0-1], "B": $$[$0]};;
break;
case 57:
this.$ = {"type": "array", "expression": $$[$0-3], "member": $$[$0-1]};
break;
case 58:
this.$ = {"type": "class", "expression": $$[$0-2], "member": $$[$0]};
break;
case 59:

			this.$ = [$$[$0-2], $$[$0]];
		
break;
case 61:
this.$ = {"type": "list", "elements": $$[$0-1]};
break;
case 73:

			this.$ = $$[$0-1];
		
break;
case 74:
this.$ = {"type": "return"};;
break;
case 75:
this.$ = {"type": "return", "expression": $$[$0-1]};;
break;
case 77: case 78: case 79: case 80: case 81:

			this.$ = yytext;
		
break;
case 88:

			this.$ = $$[$0-1].concat($$[$0]);
		
break;
case 89:

			this.$ = [];	
		
break;
case 90:
this.$ = {"type": "function", "name": $$[$0-6], "params": $$[$0-4], "range": this._$, "statements": $$[$0-1]};;
break;
case 94:

			//for(var key in _$[$0]) $$[$0][key]=_$[$0][key];
            this.$ = $$[$0-1].concat($$[$0]);
		
break;
case 96:

		return this.$;
	
break;
}
},
table: [o($V0,[2,95],{84:1,83:2}),{1:[3]},{9:5,10:[1,8],13:6,14:[1,9],22:[1,10],81:7,82:4,85:[1,3]},{1:[2,96]},o($V0,[2,94]),o($V0,[2,91]),o($V0,[2,92]),o($V0,[2,93]),{11:[1,11]},{15:[1,12]},{15:[1,13]},{12:[1,14]},{3:15,4:$V1,5:$V2},o($V3,[2,10],{21:18,22:[1,19]}),o($V0,[2,5]),{16:[1,20]},o($V4,[2,1]),o($V4,[2,2]),{16:[1,21],23:[1,22]},o($V3,[2,8]),{12:[1,23]},{18:[1,24]},{22:[1,25]},o($V0,[2,6]),o($V5,$V6,{19:26}),o($V3,[2,9]),o($V7,$V8,{76:28,17:29,70:30,74:31,78:32,71:33,73:34,25:36,62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,12:$Vc,15:$Vd,18:$Ve,20:[1,27],22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,72:$Vm,75:$Vn,77:$Vo,79:$Vp,80:$Vq}),o($V0,[2,90]),o($V5,[2,88]),o($V5,[2,82]),o($V5,[2,83]),o($V5,[2,84]),o($V5,[2,85]),o($V5,[2,86]),o($V5,[2,87]),o($V5,$V6,{19:63}),o($Vr,$Vs,{12:[1,64]}),{15:[1,65]},{15:[1,67],75:[1,66]},{15:[1,68]},{15:[1,69]},o($V7,$V8,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,25:71,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,12:[1,70],15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V5,[2,76]),o($V4,[2,70],{63:$Vt,65:[1,73]}),o($V4,[2,71]),o($Vu,$Vv,{31:$Vw,32:$Vx,33:$Vy,34:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($VY,$VZ,{26:102,11:$Vb,15:$V_,22:$V$,29:$V01}),o($VY,[2,63]),o($VY,[2,64]),o($VY,[2,65]),o($V4,[2,66]),o($V4,[2,67]),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,30:106,25:107,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:108,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:109,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:110,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:111,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:112,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V21,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,30:113,66:114,25:115,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($VY,[2,16]),o($V4,[2,3]),o($V4,[2,4]),{27:[1,116]},o($V7,$V8,{76:28,17:29,70:30,74:31,78:32,71:33,73:34,25:36,62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,12:$Vc,15:$Vd,18:$Ve,20:[1,117],22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,72:$Vm,75:$Vn,77:$Vo,79:$Vp,80:$Vq}),o($V5,[2,73]),o($V31,$V8,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,25:118,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),{15:[1,119]},o($V31,$V8,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,25:120,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V31,$V8,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,25:121,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V41,$V51,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,69:122,25:123,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V5,[2,74]),o($Vr,$Vs,{12:[1,124]}),o([37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64],$V8,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,25:125,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),{11:$Vb,15:[1,128],22:[1,127],26:59,28:47,61:48,62:126,67:49},o($V4,[2,22]),o($V4,[2,23]),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:129,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:130,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:131,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:132,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:133,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:134,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:135,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:136,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:137,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:138,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:139,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:140,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:141,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:142,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:143,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:144,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:145,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:146,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:147,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:148,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:149,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:150,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:151,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:152,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:153,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V11,$V8,{62:43,68:44,28:47,61:48,67:49,6:50,3:51,26:59,25:107,30:154,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($VY,[2,17]),{11:$Vb,22:$V$,26:155},o($V21,$V61,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,24:156,25:157,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),{15:$V_},o($Vu,[2,24],{31:$Vw,32:$Vx,33:$Vy,34:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($V4,$Vs),o($Vu,[2,25],{31:$Vw,32:$Vx,33:$Vy,34:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vu,[2,26],{31:$Vw,32:$Vx,33:$Vy,34:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vu,[2,27],{31:$Vw,32:$Vx,33:$Vy,34:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vu,[2,28],{31:$Vw,32:$Vx,33:$Vy,34:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vu,[2,29],{31:$Vw,32:$Vx,33:$Vy,34:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),{16:[1,158],23:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,37:$VA,38:$VB,39:$VC,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX},{16:[1,159],23:[1,160]},o([16,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],$Vs,{23:[1,161]}),{22:[1,162]},o($V5,[2,7]),o($Vr,$Vs,{16:[1,163]}),o($V31,$V8,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,25:164,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($Vr,$Vs,{16:[1,165]}),o($Vr,$Vs,{16:[1,166]}),{12:[1,167]},o([12,16,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],[2,68]),o($V5,[2,75]),o($Vr,$Vs,{64:[1,168]}),o([12,16,23,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64,65],[2,58],{63:$Vt}),o($VY,$VZ,{26:102,11:$Vb,15:$V_,22:$V$,29:$V01}),o([23,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],$V8,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,66:114,25:115,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V71,[2,30],{33:$Vy,34:$Vz,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($V71,[2,31],{33:$Vy,34:$Vz,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($V71,[2,32],{33:$Vy,34:$Vz,40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($V81,[2,33],{40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($V81,[2,34],{40:$VD,41:$VE,42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($V91,[2,35],{42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($V91,[2,36],{42:$VF,43:$VG,44:$VH,45:$VI,46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Va1,[2,37],{46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Va1,[2,38],{46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Va1,[2,39],{46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Va1,[2,40],{46:$VJ,47:$VK,48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vb1,[2,41],{48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vb1,[2,42],{48:$VL,49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o([12,16,23,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,64],[2,43],{49:$VM,50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o([12,16,23,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,64],[2,44],{50:$VN,51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o([12,16,23,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,64],[2,45],{51:$VO,52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o([12,16,23,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,64],[2,46],{52:$VP,53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vc1,[2,47],{53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vc1,[2,48],{53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vc1,[2,49],{53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vc1,[2,50],{53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vc1,[2,51],{53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vc1,[2,52],{53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vc1,[2,53],{53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vc1,[2,54],{53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($Vc1,[2,55],{53:$VQ,54:$VR,55:$VS,56:$VT,57:$VU,58:$VV,59:$VW,60:$VX}),o($VY,[2,18]),{16:[1,169],23:$Vd1},o([16,23,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],[2,11]),o($V4,[2,56]),o($VY,[2,61]),o($V21,$V8,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,25:171,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V21,$V8,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,25:172,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),{15:[1,173]},o($V7,$V8,{17:29,70:30,74:31,78:32,71:33,73:34,25:36,62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,76:174,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,12:$Vc,15:$Vd,18:$Ve,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,72:$Vm,75:$Vn,77:$Vo,79:$Vp,80:$Vq}),o($Vr,$Vs,{16:[1,175]}),o($V7,$V8,{17:29,70:30,74:31,78:32,71:33,73:34,25:36,62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,76:176,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,12:$Vc,15:$Vd,18:$Ve,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,72:$Vm,75:$Vn,77:$Vo,79:$Vp,80:$Vq}),o($V7,$V8,{17:29,70:30,74:31,78:32,71:33,73:34,25:36,62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,76:177,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,12:$Vc,15:$Vd,18:$Ve,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,72:$Vm,75:$Vn,77:$Vo,79:$Vp,80:$Vq}),o($V41,$V51,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,25:123,69:178,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($VY,[2,57]),o($VY,[2,14]),o($V21,$V8,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,25:179,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($Vr,$Vs,{16:$Ve1,23:$Ve1}),o($Vr,$Vs,{16:$Vf1,23:$Vf1}),o($V21,$V61,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,25:157,24:180,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($V5,[2,77]),o($V7,$V8,{17:29,70:30,74:31,78:32,71:33,73:34,25:36,62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,76:181,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,12:$Vc,15:$Vd,18:$Ve,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,72:$Vm,75:$Vn,77:$Vo,79:$Vp,80:$Vq}),o($V5,[2,79]),o($V5,[2,80]),{12:[1,182]},o($Vr,$Vs,{16:$Vg1,23:$Vg1}),{16:[1,183],23:$Vd1},o($V5,[2,78]),o($V31,$V51,{62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,25:123,69:184,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,15:$Vd,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl}),o($VY,[2,15]),{16:[1,185]},o($V7,$V8,{17:29,70:30,74:31,78:32,71:33,73:34,25:36,62:43,68:44,30:45,28:47,61:48,67:49,6:50,3:51,26:59,76:186,4:$V1,5:$V2,7:$V9,8:$Va,11:$Vb,12:$Vc,15:$Vd,18:$Ve,22:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,72:$Vm,75:$Vn,77:$Vo,79:$Vp,80:$Vq}),o($V5,[2,81])],
defaultActions: {3:[2,96]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip single line comments */	
break;
case 2:/* skip block comment */
break;
case 3:/* skip devscript (for now) */
break;
case 4:return "STRING_LOCALIZED_LITERAL";
break;
case 5:return 4
break;
case 6:return 8
break;
case 7:return 7
break;
case 8:return 15
break;
case 9:return 16
break;
case 10:return 63
break;
case 11:return 64
break;
case 12:return 18
break;
case 13:return 20
break;
case 14:return 23
break;
case 15:return 65
break;
case 16:return 47
break;
case 17:return 35
break;
case 18:return 39
break;
case 19:return 46
break;
case 20:return 53
break;
case 21:return 40
break;
case 22:return 43
break;
case 23:return 42
break;
case 24:return 41
break;
case 25:return 45
break;
case 26:return 44
break;
case 27:return 31
break;
case 28:return 54
break;
case 29:return 33
break;
case 30:return 32
break;
case 31:return 55
break;
case 32:return 34
break;
case 33:return 56
break;
case 34:return 37
break;
case 35:return 57
break;
case 36:return 38
break;
case 37:return 52
break;
case 38:return 60
break;
case 39:return 50
break;
case 40:return 51
break;
case 41:return 58
break;
case 42:return 48
break;
case 43:return 59
break;
case 44:return 49
break;
case 45:return 36
break;
case 46:return 27
break;
case 47:return 12
break;
case 48:return '?'
break;
case 49:return 75
break;
case 50:return 77
break;
case 51:return 'SWITCH'
break;
case 52:return 'CASE'
break;
case 53:return 'BREAK'
break;
case 54:return 80
break;
case 55:return 79
break;
case 56:return 'CONTINUE'
break;
case 57:return 72
break;
case 58:return 29
break;
case 59:return 11
break;
case 60:return 22
break;
case 61:return 10
break;
case 62:return 14
break;
case 63:return 'WAIT'
break;
case 64:return 85
break;
case 65:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:\/#(.|\n|\r)*?#\/)/,/^(?:&(".*"|'.*'))/,/^(?:(".*"|'.*'))/,/^(?:\d+\.(?:\d*)?f?)/,/^(?:\d+)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:!=)/,/^(?:!)/,/^(?:%)/,/^(?:==)/,/^(?:=)/,/^(?:<<)/,/^(?:<=)/,/^(?:<)/,/^(?:>>)/,/^(?:>=)/,/^(?:>)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:--)/,/^(?:-=)/,/^(?:-)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:\|\|)/,/^(?:\|=)/,/^(?:\|)/,/^(?:&&)/,/^(?:&=)/,/^(?:&)/,/^(?:\^=)/,/^(?:\^)/,/^(?:~)/,/^(?:::)/,/^(?:;)/,/^(?:\?)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:thread\b)/,/^(?:(\w+[\/\\])+\w+)/,/^(?:_?[a-zA-Z\-_]\w*)/,/^(?:#include\b)/,/^(?:#using_animtree\b)/,/^(?:wait\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = codscript;
exports.Parser = codscript.Parser;
exports.parse = function () { return codscript.parse.apply(codscript, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}