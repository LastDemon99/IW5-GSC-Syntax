/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var codscript = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[10,14,22,90],$V1=[1,16],$V2=[1,17],$V3=[16,23],$V4=[12,16,23,33,43,44,46,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],$V5=[4,5,7,8,11,12,15,18,20,22,27,31,43,44,46,47,48,49,77,80,82,84,85],$V6=[2,92],$V7=[1,62],$V8=[1,63],$V9=[1,66],$Va=[1,42],$Vb=[1,46],$Vc=[1,35],$Vd=[1,56],$Ve=[1,64],$Vf=[1,67],$Vg=[1,50],$Vh=[1,51],$Vi=[1,52],$Vj=[1,53],$Vk=[1,54],$Vl=[1,55],$Vm=[1,41],$Vn=[1,37],$Vo=[1,38],$Vp=[1,39],$Vq=[1,40],$Vr=[12,16,23,33],$Vs=[2,75],$Vt=[1,79],$Vu=[1,80],$Vv=[1,84],$Vw=[1,85],$Vx=[1,81],$Vy=[1,82],$Vz=[1,83],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[1,96],$VL=[1,97],$VM=[1,98],$VN=[1,99],$VO=[1,100],$VP=[1,101],$VQ=[1,102],$VR=[1,103],$VS=[1,104],$VT=[1,105],$VU=[1,110],$VV=[1,111],$VW=[4,5,7,8,11,15,22,27,31,43,44,46,47,48,49],$VX=[12,16,23,33,35,36,43,44,46,47,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],$VY=[1,113],$VZ=[2,33],$V_=[2,13],$V$=[1,151];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"StringLiteral":3,"STRING_LITERAL":4,"STRING_LOCALIZED_LITERAL":5,"NumericLiteral":6,"INTEGER_LITERAL":7,"FLOAT_LITERAL":8,"IncludeDirective":9,"INCLUDE":10,"FILEPATH":11,";":12,"AnimtreeDirective":13,"USING_ANIMTREE":14,"(":15,")":16,"Block":17,"{":18,"StatementList":19,"}":20,"FormalParameterList":21,"IDENTIFIER":22,",":23,"FunctionParameterList":24,"Expression":25,"FunctionCall":26,"THREAD":27,"PointerExpression":28,"::":29,"FunctionExpression":30,"FUNC_POINTER_BEGIN":31,"ObjectExpression":32,"]":33,"MemberExpression":34,"[":35,".":36,"ElementList":37,"ListExpression":38,"LiteralExpression":39,"OptionalExpression":40,"BasicExpression":41,"OperatorPostfix":42,"++":43,"--":44,"OperatorPrefix":45,"+":46,"-":47,"~":48,"!":49,"OperatorMid":50,"*":51,"/":52,"%":53,"<<":54,">>":55,"<":56,"<=":57,">":58,">=":59,"==":60,"!=":61,"&":62,"|":63,"&&":64,"||":65,"=":66,"+=":67,"-=":68,"*=":69,"/=":70,"&=":71,"^=":72,"|=":73,"e":74,"ExpressionStatement":75,"ReturnStatement":76,"RETURN":77,"EmptyStatement":78,"IfStatement":79,"IF":80,"Statement":81,"ELSE":82,"LoopStatement":83,"WHILE":84,"FOR":85,"FunctionDeclaration":86,"SourceElement":87,"SourceElements":88,"Program":89,"EOF":90,"$accept":0,"$end":1},
terminals_: {2:"error",4:"STRING_LITERAL",5:"STRING_LOCALIZED_LITERAL",7:"INTEGER_LITERAL",8:"FLOAT_LITERAL",10:"INCLUDE",11:"FILEPATH",12:";",14:"USING_ANIMTREE",15:"(",16:")",18:"{",20:"}",22:"IDENTIFIER",23:",",27:"THREAD",29:"::",31:"FUNC_POINTER_BEGIN",33:"]",35:"[",36:".",43:"++",44:"--",46:"+",47:"-",48:"~",49:"!",51:"*",52:"/",53:"%",54:"<<",55:">>",56:"<",57:"<=",58:">",59:">=",60:"==",61:"!=",62:"&",63:"|",64:"&&",65:"||",66:"=",67:"+=",68:"-=",69:"*=",70:"/=",71:"&=",72:"^=",73:"|=",77:"RETURN",80:"IF",82:"ELSE",84:"WHILE",85:"FOR",90:"EOF"},
productions_: [0,[3,1],[3,1],[6,1],[6,1],[9,3],[13,5],[17,3],[21,1],[21,3],[21,0],[24,1],[24,3],[24,0],[26,4],[26,5],[26,4],[26,5],[26,6],[30,2],[30,1],[28,4],[34,4],[34,3],[37,3],[37,3],[38,3],[32,1],[32,1],[32,1],[39,1],[39,1],[40,1],[40,0],[41,1],[41,1],[41,1],[42,1],[42,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[74,1],[74,2],[74,2],[74,3],[74,3],[25,1],[75,2],[76,2],[76,3],[78,1],[79,5],[79,6],[79,5],[83,5],[83,9],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[19,2],[19,0],[86,7],[87,1],[87,1],[87,1],[88,2],[88,0],[89,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			this.$ = $$[$0].substring(1, $$[$0].length-1);
		
break;
case 2:

			this.$ = $$[$0].substring(2, $$[$0].length-1);
		
break;
case 5:
this.$ = {"type": "include", "arg": $$[$0-1], "range": this._$};
break;
case 6:
this.$ = {"type": "animtree", "arg": $$[$0-2], "range": this._$};
break;
case 7:
this.$ = {"type": "block", "content": $$[$0-1], "range": this._$};;
break;
case 8: case 11:

			this.$ = [$$[$0]];
		
break;
case 9: case 12: case 25:

			this.$ = $$[$0-2].concat($$[$0]);
		
break;
case 10: case 13: case 33: case 98:

			this.$ = [];
		
break;
case 14: case 16:
this.$ = {"type": "call", "name": $$[$0-3], "params": $$[$0-1]};;
break;
case 15:
this.$ = {"type": "thread", "name": $$[$0-4], "params": $$[$0-1]};;
break;
case 17:
this.$ = {"type": "call", "name": $$[$0-4], "params": $$[$0-2]};;
break;
case 18:
this.$ = {"type": "call_external", "file": $$[$0-5], "name": $$[$0-3], "params": $$[$0-1]};;
break;
case 19:

			this.$ = $$[$0];
			this.$.caller = $$[$0-1];	
		
break;
case 22:
this.$ = {"type": "array", "expression": $$[$0-3], "member": $$[$0-1]};
break;
case 23:
this.$ = {"type": "property", "expression": $$[$0-2], "member": $$[$0]};
break;
case 24:

			this.$ = [$$[$0-2], $$[$0]];
		
break;
case 26:
this.$ = {"type": "list", "elements": $$[$0-1]};
break;
case 71:
this.$ = {"A": $$[$0-1], "Postfix Op": $$[$0]};;
break;
case 72:
this.$ = {"A": $$[$0-1], "Prefix Op": $$[$0]};;
break;
case 73:
this.$ = {"A": $$[$0-2], "Mid Op": $$[$0-1], "B": $$[$0]};;
break;
case 74:
this.$ = {"A": $$[$0-2], "PARENS": $$[$0-1], "B": $$[$0]};;
break;
case 76:

			this.$ = $$[$0-1];
		
break;
case 77:
this.$ = {"type": "return"};;
break;
case 78:
this.$ = {"type": "return", "expression": $$[$0-1]};;
break;
case 80: case 81: case 82: case 83: case 84:

			this.$ = yytext;
		
break;
case 91:

			this.$ = $$[$0-1].concat($$[$0]);
		
break;
case 92:

			this.$ = [];	
		
break;
case 93:
this.$ = {"type": "function", "name": $$[$0-6], "params": $$[$0-4], "range": this._$, "statements": $$[$0-1]};;
break;
case 97:

			//for(var key in _$[$0]) $$[$0][key]=_$[$0][key];
            this.$ = $$[$0-1].concat($$[$0]);
		
break;
case 99:

		return this.$;
	
break;
}
},
table: [o($V0,[2,98],{89:1,88:2}),{1:[3]},{9:5,10:[1,8],13:6,14:[1,9],22:[1,10],86:7,87:4,90:[1,3]},{1:[2,99]},o($V0,[2,97]),o($V0,[2,94]),o($V0,[2,95]),o($V0,[2,96]),{11:[1,11]},{15:[1,12]},{15:[1,13]},{12:[1,14]},{3:15,4:$V1,5:$V2},o($V3,[2,10],{21:18,22:[1,19]}),o($V0,[2,5]),{16:[1,20]},o($V4,[2,1]),o($V4,[2,2]),{16:[1,21],23:[1,22]},o($V3,[2,8]),{12:[1,23]},{18:[1,24]},{22:[1,25]},o($V0,[2,6]),o($V5,$V6,{19:26}),o($V3,[2,9]),{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,12:$Va,15:$Vb,17:29,18:$Vc,20:[1,27],22:$Vd,25:36,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43,75:30,76:33,77:$Vm,78:34,79:31,80:$Vn,81:28,82:$Vo,83:32,84:$Vp,85:$Vq},o($V0,[2,93]),o($V5,[2,91]),o($V5,[2,85]),o($V5,[2,86]),o($V5,[2,87]),o($V5,[2,88]),o($V5,[2,89]),o($V5,[2,90]),o($V5,$V6,{19:68}),{12:[1,69]},{15:[1,70]},{15:[1,72],80:[1,71]},{15:[1,73]},{15:[1,74]},{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,12:[1,75],15:$Vb,22:$Vd,25:76,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43},o($V5,[2,79]),o($Vr,$Vs,{42:77,50:78,43:$Vt,44:$Vu,46:$Vv,47:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT}),o($V4,[2,70]),{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:106},{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:109,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,37:108,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:107},o($V4,[2,34],{35:$VU,36:$VV}),o($V4,[2,35]),o($V4,[2,36]),o($VW,[2,39]),o($VW,[2,40]),o($VW,[2,41]),o($VW,[2,42]),o($VW,[2,43]),o($VW,[2,44]),o($VX,[2,27],{28:65,26:112,11:$V9,15:$VY,22:[1,114],27:$Ve,31:$Vf}),o($VX,[2,28]),o($VX,[2,29]),o($V4,[2,30]),o($V4,[2,31]),o($VX,[2,20]),o($V4,[2,3]),o($V4,[2,4]),{22:[1,115],28:116,31:$Vf},{15:[1,117]},{29:[1,118]},{11:$V9,22:$Vd,26:61,27:$Ve,28:65,30:57,31:$Vf,32:119,34:58},{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,12:$Va,15:$Vb,17:29,18:$Vc,20:[1,120],22:$Vd,25:36,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43,75:30,76:33,77:$Vm,78:34,79:31,80:$Vn,81:28,82:$Vo,83:32,84:$Vp,85:$Vq},o($V5,[2,76]),{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:121,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43},{15:[1,122]},{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:123,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43},{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:124,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43},{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,12:$VZ,15:$Vb,22:$Vd,25:126,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,40:125,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43},o($V5,[2,77]),{12:[1,127]},o($V4,[2,71]),{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:128},o($V4,[2,37]),o($V4,[2,38]),o($VW,[2,45]),o($VW,[2,46]),o($VW,[2,47]),o($VW,[2,48]),o($VW,[2,49]),o($VW,[2,50]),o($VW,[2,51]),o($VW,[2,52]),o($VW,[2,53]),o($VW,[2,54]),o($VW,[2,55]),o($VW,[2,56]),o($VW,[2,57]),o($VW,[2,58]),o($VW,[2,59]),o($VW,[2,60]),o($VW,[2,61]),o($VW,[2,62]),o($VW,[2,63]),o($VW,[2,64]),o($VW,[2,65]),o($VW,[2,66]),o($VW,[2,67]),o($VW,[2,68]),o($VW,[2,69]),o($Vr,[2,72],{42:77,50:78,43:$Vt,44:$Vu,46:$Vv,47:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT}),{16:[1,129],23:$Vs,42:77,43:$Vt,44:$Vu,46:$Vv,47:$Vw,50:78,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT},{16:[1,130],23:[1,131]},{23:[1,132]},{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:133,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43},{11:$V9,22:$Vd,26:61,27:$Ve,28:65,30:57,31:$Vf,32:134,34:58},o($VX,[2,19]),o($V3,$V_,{74:43,41:44,45:45,32:47,39:48,38:49,30:57,34:58,6:59,3:60,26:61,28:65,24:135,25:136,4:$V1,5:$V2,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,27:$Ve,31:$Vf,43:$Vg,44:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl}),{15:$VY},{15:[1,137]},{15:[1,138]},o($V3,$V_,{74:43,41:44,45:45,32:47,39:48,38:49,30:57,34:58,6:59,3:60,26:61,28:65,25:136,24:139,4:$V1,5:$V2,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,27:$Ve,31:$Vf,43:$Vg,44:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl}),{22:[1,140]},{33:[1,141],35:$VU,36:$VV},o($V5,[2,7]),{16:[1,142]},{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:143,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43},{16:[1,144]},{16:[1,145]},{12:[1,146]},o([12,16],[2,32]),o($V5,[2,78]),o($Vr,[2,73],{42:77,50:78,43:$Vt,44:$Vu,46:$Vv,47:$Vw,51:$Vx,52:$Vy,53:$Vz,54:$VA,55:$VB,56:$VC,57:$VD,58:$VE,59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS,73:$VT}),o($V4,[2,74]),o($V4,[2,26]),{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:147,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43},{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:148,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43},{33:[1,149]},o($VX,[2,23]),{16:[1,150],23:$V$},o($V3,[2,11]),o($V3,$V_,{74:43,41:44,45:45,32:47,39:48,38:49,30:57,34:58,6:59,3:60,26:61,28:65,25:136,24:152,4:$V1,5:$V2,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,27:$Ve,31:$Vf,43:$Vg,44:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl}),o($V3,$V_,{74:43,41:44,45:45,32:47,39:48,38:49,30:57,34:58,6:59,3:60,26:61,28:65,25:136,24:153,4:$V1,5:$V2,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,27:$Ve,31:$Vf,43:$Vg,44:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl}),{16:[1,154],23:$V$},{15:[1,155]},{33:[1,156]},{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,12:$Va,15:$Vb,17:29,18:$Vc,22:$Vd,25:36,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43,75:30,76:33,77:$Vm,78:34,79:31,80:$Vn,81:157,82:$Vo,83:32,84:$Vp,85:$Vq},{16:[1,158]},{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,12:$Va,15:$Vb,17:29,18:$Vc,22:$Vd,25:36,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43,75:30,76:33,77:$Vm,78:34,79:31,80:$Vn,81:159,82:$Vo,83:32,84:$Vp,85:$Vq},{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,12:$Va,15:$Vb,17:29,18:$Vc,22:$Vd,25:36,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43,75:30,76:33,77:$Vm,78:34,79:31,80:$Vn,81:160,82:$Vo,83:32,84:$Vp,85:$Vq},{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,12:$VZ,15:$Vb,22:$Vd,25:126,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,40:161,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43},o($V3,[2,25]),o($V3,[2,24]),o($VX,[2,22]),o($VX,[2,14]),{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:162,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43},{16:[1,163],23:$V$},{16:[1,164],23:$V$},o($VX,[2,16]),o($V3,$V_,{74:43,41:44,45:45,32:47,39:48,38:49,30:57,34:58,6:59,3:60,26:61,28:65,25:136,24:165,4:$V1,5:$V2,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,27:$Ve,31:$Vf,43:$Vg,44:$Vh,46:$Vi,47:$Vj,48:$Vk,49:$Vl}),{15:[2,21]},o($V5,[2,80]),{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,12:$Va,15:$Vb,17:29,18:$Vc,22:$Vd,25:36,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43,75:30,76:33,77:$Vm,78:34,79:31,80:$Vn,81:166,82:$Vo,83:32,84:$Vp,85:$Vq},o($V5,[2,82]),o($V5,[2,83]),{12:[1,167]},o($V3,[2,12]),o($VX,[2,15]),o($VX,[2,17]),{16:[1,168],23:$V$},o($V5,[2,81]),{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,15:$Vb,16:$VZ,22:$Vd,25:126,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,40:169,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43},o($VX,[2,18]),{16:[1,170]},{3:60,4:$V1,5:$V2,6:59,7:$V7,8:$V8,11:$V9,12:$Va,15:$Vb,17:29,18:$Vc,22:$Vd,25:36,26:61,27:$Ve,28:65,30:57,31:$Vf,32:47,34:58,38:49,39:48,41:44,43:$Vg,44:$Vh,45:45,46:$Vi,47:$Vj,48:$Vk,49:$Vl,74:43,75:30,76:33,77:$Vm,78:34,79:31,80:$Vn,81:171,82:$Vo,83:32,84:$Vp,85:$Vq},o($V5,[2,84])],
defaultActions: {3:[2,99],156:[2,21]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip single line comments */	
break;
case 2:/* skip block comment */
break;
case 3:/* skip devscript (for now) */
break;
case 4:return "STRING_LOCALIZED_LITERAL";
break;
case 5:return 4
break;
case 6:return 8
break;
case 7:return 7
break;
case 8:return 15
break;
case 9:return 16
break;
case 10:return 31
break;
case 11:return 35
break;
case 12:return 33
break;
case 13:return 18
break;
case 14:return 20
break;
case 15:return 23
break;
case 16:return 36
break;
case 17:return 61
break;
case 18:return 49
break;
case 19:return 53
break;
case 20:return 60
break;
case 21:return 66
break;
case 22:return 54
break;
case 23:return 57
break;
case 24:return 56
break;
case 25:return 55
break;
case 26:return 59
break;
case 27:return 58
break;
case 28:return 43
break;
case 29:return 67
break;
case 30:return 46
break;
case 31:return 44
break;
case 32:return 68
break;
case 33:return 47
break;
case 34:return 69
break;
case 35:return 51
break;
case 36:return 70
break;
case 37:return 52
break;
case 38:return 65
break;
case 39:return 73
break;
case 40:return 63
break;
case 41:return 64
break;
case 42:return 71
break;
case 43:return 62
break;
case 44:return 72
break;
case 45:return '^'
break;
case 46:return 48
break;
case 47:return 29
break;
case 48:return 12
break;
case 49:return '?'
break;
case 50:return 80
break;
case 51:return 82
break;
case 52:return 'SWITCH'
break;
case 53:return 'CASE'
break;
case 54:return 'BREAK'
break;
case 55:return 85
break;
case 56:return 84
break;
case 57:return 'CONTINUE'
break;
case 58:return 77
break;
case 59:return 27
break;
case 60:return 11
break;
case 61:return 22
break;
case 62:return 10
break;
case 63:return 14
break;
case 64:return 'WAIT'
break;
case 65:return 90
break;
case 66:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:\/#(.|\n|\r)*?#\/)/,/^(?:[\s*[.*]\s*&(".*?"|'.*?'))/,/^(?:(".*?"|'.*?'))/,/^(?:\d+\.(?:\d*)?f?)/,/^(?:\d+)/,/^(?:\()/,/^(?:\))/,/^(?:\[\s*\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:!=)/,/^(?:!)/,/^(?:%)/,/^(?:==)/,/^(?:=)/,/^(?:<<)/,/^(?:<=)/,/^(?:<)/,/^(?:>>)/,/^(?:>=)/,/^(?:>)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:--)/,/^(?:-=)/,/^(?:-)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:\|\|)/,/^(?:\|=)/,/^(?:\|)/,/^(?:&&)/,/^(?:&=)/,/^(?:&)/,/^(?:\^=)/,/^(?:\^)/,/^(?:~)/,/^(?:::)/,/^(?:;)/,/^(?:\?)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:thread\b)/,/^(?:(\w+[\/\\])+\w+)/,/^(?:_?[a-zA-Z\-_]\w*)/,/^(?:#include\b)/,/^(?:#using_animtree\b)/,/^(?:wait\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = codscript;
exports.Parser = codscript.Parser;
exports.parse = function () { return codscript.parse.apply(codscript, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}