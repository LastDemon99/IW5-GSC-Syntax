/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var codscript = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[9,13,21,82],$V1=[1,16],$V2=[15,22],$V3=[11,15,22,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,61],$V4=[4,6,7,10,11,14,17,19,21,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,69,72,74,76,77],$V5=[2,85],$V6=[34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],$V7=[2,15],$V8=[1,59],$V9=[1,60],$Va=[1,58],$Vb=[1,41],$Vc=[1,57],$Vd=[1,34],$Ve=[1,45],$Vf=[1,51],$Vg=[1,52],$Vh=[1,53],$Vi=[1,54],$Vj=[1,55],$Vk=[1,56],$Vl=[1,40],$Vm=[1,36],$Vn=[1,37],$Vo=[1,38],$Vp=[1,39],$Vq=[28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],$Vr=[2,17],$Vs=[1,70],$Vt=[11,15,22,61],$Vu=[2,68],$Vv=[1,72],$Vw=[1,73],$Vx=[1,77],$Vy=[1,78],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,79],$VD=[1,80],$VE=[1,81],$VF=[1,82],$VG=[1,83],$VH=[1,84],$VI=[1,85],$VJ=[1,86],$VK=[1,87],$VL=[1,88],$VM=[1,89],$VN=[1,90],$VO=[1,91],$VP=[1,92],$VQ=[1,93],$VR=[1,94],$VS=[1,95],$VT=[1,96],$VU=[1,97],$VV=[1,98],$VW=[1,99],$VX=[11,15,22,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,62],$VY=[2,58],$VZ=[1,100],$V_=[11,15,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,61],$V$=[15,22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],$V01=[15,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],$V11=[11,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],$V21=[2,65],$V31=[2,12],$V41=[11,15,22,28,29,34,35,36,61],$V51=[11,15,22,28,29,30,31,34,35,36,61],$V61=[11,15,22,28,29,30,31,34,35,36,37,38,61],$V71=[11,15,22,28,29,30,31,34,35,36,37,38,39,40,41,42,61],$V81=[11,15,22,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,61],$V91=[11,15,22,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,61],$Va1=[1,164],$Vb1=[2,56],$Vc1=[2,55],$Vd1=[2,11];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"StringLiteral":3,"STRING_LITERAL":4,"NumericLiteral":5,"INTEGER_LITERAL":6,"FLOAT_LITERAL":7,"IncludeDirective":8,"INCLUDE":9,"FILEPATH":10,";":11,"AnimtreeDirective":12,"USING_ANIMTREE":13,"(":14,")":15,"Block":16,"{":17,"StatementList":18,"}":19,"FormalParameterList":20,"IDENTIFIER":21,",":22,"FunctionParameterList":23,"Expression":24,"FunctionExpression":25,"::":26,"e":27,"++":28,"--":29,"+":30,"-":31,"!":32,"~":33,"*":34,"/":35,"%":36,"<<":37,">>":38,"<":39,"<=":40,">":41,">=":42,"==":43,"!=":44,"&":45,"^":46,"|":47,"&&":48,"||":49,"=":50,"+=":51,"-=":52,"*=":53,"/=":54,"&=":55,"^=":56,"|=":57,"MemberExpression":58,"NonLiteralExpression":59,"[":60,"]":61,".":62,"ElementList":63,"ListExpression":64,"LiteralExpression":65,"OptionalExpression":66,"ExpressionStatement":67,"ReturnStatement":68,"RETURN":69,"EmptyStatement":70,"IfStatement":71,"IF":72,"Statement":73,"ELSE":74,"LoopStatement":75,"WHILE":76,"FOR":77,"FunctionDeclaration":78,"SourceElement":79,"SourceElements":80,"Program":81,"EOF":82,"$accept":0,"$end":1},
terminals_: {2:"error",4:"STRING_LITERAL",6:"INTEGER_LITERAL",7:"FLOAT_LITERAL",9:"INCLUDE",10:"FILEPATH",11:";",13:"USING_ANIMTREE",14:"(",15:")",17:"{",19:"}",21:"IDENTIFIER",22:",",26:"::",28:"++",29:"--",30:"+",31:"-",32:"!",33:"~",34:"*",35:"/",36:"%",37:"<<",38:">>",39:"<",40:"<=",41:">",42:">=",43:"==",44:"!=",45:"&",46:"^",47:"|",48:"&&",49:"||",50:"=",51:"+=",52:"-=",53:"*=",54:"/=",55:"&=",56:"^=",57:"|=",60:"[",61:"]",62:".",69:"RETURN",72:"IF",74:"ELSE",76:"WHILE",77:"FOR",82:"EOF"},
productions_: [0,[3,1],[5,1],[5,1],[8,3],[12,5],[16,3],[20,1],[20,3],[20,0],[23,1],[23,3],[23,0],[25,4],[25,6],[27,0],[27,1],[27,1],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[58,4],[58,3],[63,3],[63,3],[64,3],[59,1],[59,1],[59,1],[59,1],[65,1],[65,1],[66,1],[66,0],[24,1],[24,1],[24,1],[67,2],[68,2],[68,3],[70,1],[71,5],[71,6],[71,5],[75,5],[75,9],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[18,2],[18,0],[78,7],[79,1],[79,1],[79,1],[80,2],[80,0],[81,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			this.$ = $$[$0].substring(1, $$[$0].length-1);
		
break;
case 4:
this.$ = {"type": "include", "arg": $$[$0-1], "range": this._$};
break;
case 5:
this.$ = {"type": "animtree", "arg": $$[$0-2], "range": this._$};
break;
case 6:
this.$ = {"type": "block", "content": $$[$0-1], "range": this._$};;
break;
case 7: case 10:

			this.$ = [$$[$0]];
		
break;
case 8: case 11: case 56:

			this.$ = $$[$0-2].concat($$[$0]);
		
break;
case 9: case 12: case 65: case 91:

			this.$ = [];
		
break;
case 13:
this.$ = {"type": "call", "name": $$[$0-3], "params": $$[$0-1]};;
break;
case 14:
this.$ = {"type": "call_external", "file": $$[$0-5], "name": $$[$0-3], "params": $$[$0-1]};;
break;
case 18: case 19:
this.$ = {"A": $$[$0-1], "Postfix Op": $$[$0]};;
break;
case 20: case 21: case 22: case 23: case 24: case 25:
this.$ = {"A": $$[$0-1], "Prefix Op": $$[$0]};;
break;
case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51:
this.$ = {"A": $$[$0-2], "Op": $$[$0-1], "B": $$[$0]};;
break;
case 52:
this.$ = {"A": $$[$0-2], "PARENS": $$[$0-1], "B": $$[$0]};;
break;
case 53:
this.$ = {"type": "array", "expression": $$[$0-3], "member": $$[$0-1]};
break;
case 54:
this.$ = {"type": "class", "expression": $$[$0-2], "member": $$[$0]};
break;
case 55:

			this.$ = [$$[$0-2], $$[$0]];
		
break;
case 57:
this.$ = {"type": "list", "elements": $$[$0-1]};
break;
case 69:

			this.$ = $$[$0-1];
		
break;
case 70:
this.$ = {"type": "return"};;
break;
case 71:
this.$ = {"type": "return", "expression": $$[$0-1]};;
break;
case 73: case 74: case 75: case 76: case 77:

			this.$ = yytext;
		
break;
case 84:

			this.$ = $$[$0-1].concat($$[$0]);
		
break;
case 85:

			this.$ = [];	
		
break;
case 86:
this.$ = {"type": "function", "name": $$[$0-6], "params": $$[$0-4], "range": this._$, "statements": $$[$0-1]};;
break;
case 90:

			//for(var key in _$[$0]) $$[$0][key]=_$[$0][key];
            this.$ = $$[$0-1].concat($$[$0]);
		
break;
case 92:

		return this.$;
	
break;
}
},
table: [o($V0,[2,91],{81:1,80:2}),{1:[3]},{8:5,9:[1,8],12:6,13:[1,9],21:[1,10],78:7,79:4,82:[1,3]},{1:[2,92]},o($V0,[2,90]),o($V0,[2,87]),o($V0,[2,88]),o($V0,[2,89]),{10:[1,11]},{14:[1,12]},{14:[1,13]},{11:[1,14]},{3:15,4:$V1},o($V2,[2,9],{20:17,21:[1,18]}),o($V0,[2,4]),{15:[1,19]},o($V3,[2,1]),{15:[1,20],22:[1,21]},o($V2,[2,7]),{11:[1,22]},{17:[1,23]},{21:[1,24]},o($V0,[2,5]),o($V4,$V5,{18:25}),o($V2,[2,8]),o($V6,$V7,{73:27,16:28,67:29,71:30,75:31,68:32,70:33,24:35,59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,4:$V1,6:$V8,7:$V9,10:$Va,11:$Vb,14:$Vc,17:$Vd,19:[1,26],21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,69:$Vl,72:$Vm,74:$Vn,76:$Vo,77:$Vp}),o($V0,[2,86]),o($V4,[2,84]),o($V4,[2,78]),o($V4,[2,79]),o($V4,[2,80]),o($V4,[2,81]),o($V4,[2,82]),o($V4,[2,83]),o($V4,$V5,{18:61}),o($Vq,$Vr,{11:[1,62]}),{14:[1,63]},{14:[1,65],72:[1,64]},{14:[1,66]},{14:[1,67]},o($V6,$V7,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,24:69,4:$V1,6:$V8,7:$V9,10:$Va,11:[1,68],14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V4,[2,72]),o($V3,[2,66],{60:$Vs,62:[1,71]}),o($V3,[2,67]),o($Vt,$Vu,{28:$Vv,29:$Vw,30:$Vx,31:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($VX,$VY,{14:$VZ}),o($VX,[2,59]),o($VX,[2,60]),o($VX,[2,61]),o($V3,[2,62]),o($V3,[2,63]),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,27:101,24:102,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:103,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:104,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:105,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:106,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:107,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V$,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,27:108,63:109,24:110,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),{26:[1,111]},o($V3,[2,2]),o($V3,[2,3]),o($V6,$V7,{73:27,16:28,67:29,71:30,75:31,68:32,70:33,24:35,59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,4:$V1,6:$V8,7:$V9,10:$Va,11:$Vb,14:$Vc,17:$Vd,19:[1,112],21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,69:$Vl,72:$Vm,74:$Vn,76:$Vo,77:$Vp}),o($V4,[2,69]),o($V01,$V7,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,24:113,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),{14:[1,114]},o($V01,$V7,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,24:115,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V01,$V7,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,24:116,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V11,$V21,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,66:117,24:118,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V4,[2,70]),o($Vq,$Vr,{11:[1,119]}),o([34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,61],$V7,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,24:120,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),{10:$Va,14:[1,123],21:[1,122],25:46,58:47,59:121,64:48},o($V3,[2,18]),o($V3,[2,19]),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:124,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:125,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:126,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:127,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:128,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:129,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:130,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:131,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:132,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:133,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:134,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:135,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:136,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:137,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:138,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:139,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:140,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:141,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:142,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:143,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:144,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:145,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:146,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:147,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:148,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V_,$V7,{59:42,65:43,25:46,58:47,64:48,5:49,3:50,24:102,27:149,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V$,$V31,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,23:150,24:151,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($Vt,[2,20],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V3,$Vr),o($Vt,[2,21],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($Vt,[2,22],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($Vt,[2,23],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($Vt,[2,24],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($Vt,[2,25],{28:$Vv,29:$Vw,30:$Vx,31:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),{15:[1,152],22:$Vu,28:$Vv,29:$Vw,30:$Vx,31:$Vy,34:$Vz,35:$VA,36:$VB,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW},{15:[1,153],22:[1,154]},o([15,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],$Vr,{22:[1,155]}),{21:[1,156]},o($V4,[2,6]),o($Vq,$Vr,{15:[1,157]}),o($V01,$V7,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,24:158,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($Vq,$Vr,{15:[1,159]}),o($Vq,$Vr,{15:[1,160]}),{11:[1,161]},o([11,15,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],[2,64]),o($V4,[2,71]),o($Vq,$Vr,{61:[1,162]}),o([11,15,22,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,61,62],[2,54],{60:$Vs}),o($VX,$VY,{14:$VZ}),o([22,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],$V7,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,63:109,24:110,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V41,[2,26],{30:$Vx,31:$Vy,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V41,[2,27],{30:$Vx,31:$Vy,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V41,[2,28],{30:$Vx,31:$Vy,37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V51,[2,29],{37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V51,[2,30],{37:$VC,38:$VD,39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V61,[2,31],{39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V61,[2,32],{39:$VE,40:$VF,41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V71,[2,33],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V71,[2,34],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V71,[2,35],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V71,[2,36],{43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V81,[2,37],{45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V81,[2,38],{45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o([11,15,22,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,61],[2,39],{46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o([11,15,22,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,61],[2,40],{47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o([11,15,22,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,61],[2,41],{48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o([11,15,22,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,61],[2,42],{49:$VO,50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V91,[2,43],{50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V91,[2,44],{50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V91,[2,45],{50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V91,[2,46],{50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V91,[2,47],{50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V91,[2,48],{50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V91,[2,49],{50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V91,[2,50],{50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),o($V91,[2,51],{50:$VP,51:$VQ,52:$VR,53:$VS,54:$VT,55:$VU,56:$VV,57:$VW}),{15:[1,163],22:$Va1},o([15,22,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],[2,10]),o($V3,[2,52]),o($VX,[2,57]),o($V$,$V7,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,24:165,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V$,$V7,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,24:166,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),{14:[1,167]},o($V6,$V7,{16:28,67:29,71:30,75:31,68:32,70:33,24:35,59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,73:168,4:$V1,6:$V8,7:$V9,10:$Va,11:$Vb,14:$Vc,17:$Vd,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,69:$Vl,72:$Vm,74:$Vn,76:$Vo,77:$Vp}),o($Vq,$Vr,{15:[1,169]}),o($V6,$V7,{16:28,67:29,71:30,75:31,68:32,70:33,24:35,59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,73:170,4:$V1,6:$V8,7:$V9,10:$Va,11:$Vb,14:$Vc,17:$Vd,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,69:$Vl,72:$Vm,74:$Vn,76:$Vo,77:$Vp}),o($V6,$V7,{16:28,67:29,71:30,75:31,68:32,70:33,24:35,59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,73:171,4:$V1,6:$V8,7:$V9,10:$Va,11:$Vb,14:$Vc,17:$Vd,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,69:$Vl,72:$Vm,74:$Vn,76:$Vo,77:$Vp}),o($V11,$V21,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,24:118,66:172,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($VX,[2,53]),o($VX,[2,13]),o($V$,$V7,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,24:173,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($Vq,$Vr,{15:$Vb1,22:$Vb1}),o($Vq,$Vr,{15:$Vc1,22:$Vc1}),o($V$,$V31,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,24:151,23:174,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($V4,[2,73]),o($V6,$V7,{16:28,67:29,71:30,75:31,68:32,70:33,24:35,59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,73:175,4:$V1,6:$V8,7:$V9,10:$Va,11:$Vb,14:$Vc,17:$Vd,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,69:$Vl,72:$Vm,74:$Vn,76:$Vo,77:$Vp}),o($V4,[2,75]),o($V4,[2,76]),{11:[1,176]},o($Vq,$Vr,{15:$Vd1,22:$Vd1}),{15:[1,177],22:$Va1},o($V4,[2,74]),o($V01,$V21,{59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,24:118,66:178,4:$V1,6:$V8,7:$V9,10:$Va,14:$Vc,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk}),o($VX,[2,14]),{15:[1,179]},o($V6,$V7,{16:28,67:29,71:30,75:31,68:32,70:33,24:35,59:42,65:43,27:44,25:46,58:47,64:48,5:49,3:50,73:180,4:$V1,6:$V8,7:$V9,10:$Va,11:$Vb,14:$Vc,17:$Vd,21:$Ve,28:$Vf,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,69:$Vl,72:$Vm,74:$Vn,76:$Vo,77:$Vp}),o($V4,[2,77])],
defaultActions: {3:[2,92]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip single line comments */	
break;
case 2:/* skip block comment */
break;
case 3:/* skip devscript (for now) */
break;
case 4:return 4
break;
case 5:return 7
break;
case 6:return 6
break;
case 7:return 14
break;
case 8:return 15
break;
case 9:return 60
break;
case 10:return 61
break;
case 11:return 17
break;
case 12:return 19
break;
case 13:return 22
break;
case 14:return 62
break;
case 15:return 44
break;
case 16:return 32
break;
case 17:return 36
break;
case 18:return 43
break;
case 19:return 50
break;
case 20:return 37
break;
case 21:return 40
break;
case 22:return 39
break;
case 23:return 38
break;
case 24:return 42
break;
case 25:return 41
break;
case 26:return 28
break;
case 27:return 51
break;
case 28:return 30
break;
case 29:return 29
break;
case 30:return 52
break;
case 31:return 31
break;
case 32:return 53
break;
case 33:return 34
break;
case 34:return 54
break;
case 35:return 35
break;
case 36:return 49
break;
case 37:return 57
break;
case 38:return 47
break;
case 39:return 48
break;
case 40:return 55
break;
case 41:return 45
break;
case 42:return 56
break;
case 43:return 46
break;
case 44:return 33
break;
case 45:return 26
break;
case 46:return 11
break;
case 47:return '?'
break;
case 48:return 72
break;
case 49:return 74
break;
case 50:return 'SWITCH'
break;
case 51:return 'CASE'
break;
case 52:return 'BREAK'
break;
case 53:return 77
break;
case 54:return 76
break;
case 55:return 'CONTINUE'
break;
case 56:return 69
break;
case 57:return 10
break;
case 58:return 21
break;
case 59:return 9
break;
case 60:return 13
break;
case 61:return 'WAIT'
break;
case 62:return 82
break;
case 63:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:\/#(.|\n|\r)*?#\/)/,/^(?:".*"|'.*')/,/^(?:\d+\.(?:\d*)?f?)/,/^(?:\d+)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:!=)/,/^(?:!)/,/^(?:%)/,/^(?:==)/,/^(?:=)/,/^(?:<<)/,/^(?:<=)/,/^(?:<)/,/^(?:>>)/,/^(?:>=)/,/^(?:>)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:--)/,/^(?:-=)/,/^(?:-)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:\|\|)/,/^(?:\|=)/,/^(?:\|)/,/^(?:&&)/,/^(?:&=)/,/^(?:&)/,/^(?:\^=)/,/^(?:\^)/,/^(?:~)/,/^(?:::)/,/^(?:;)/,/^(?:\?)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:(\w+[\/\\])+\w+)/,/^(?:_?[a-zA-Z\-_]\w*)/,/^(?:#include\b)/,/^(?:#using_animtree\b)/,/^(?:wait\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = codscript;
exports.Parser = codscript.Parser;
exports.parse = function () { return codscript.parse.apply(codscript, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}