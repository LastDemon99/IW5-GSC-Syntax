/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var codscript = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[10,14,22,94],$V1=[1,16],$V2=[1,17],$V3=[16,23],$V4=[5,12,16,23,33,44,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],$V5=[4,5,7,8,11,12,15,18,20,22,27,29,32,36,44,45,47,48,49,50,77,79,82,84,86,87,88,89],$V6=[2,101],$V7=[1,70],$V8=[1,71],$V9=[1,74],$Va=[1,47],$Vb=[1,51],$Vc=[1,39],$Vd=[1,62],$Ve=[1,72],$Vf=[1,65],$Vg=[1,75],$Vh=[1,69],$Vi=[1,56],$Vj=[1,57],$Vk=[1,58],$Vl=[1,59],$Vm=[1,60],$Vn=[1,61],$Vo=[1,46],$Vp=[1,40],$Vq=[1,42],$Vr=[1,43],$Vs=[1,44],$Vt=[1,45],$Vu=[1,36],$Vv=[1,37],$Vw=[12,16,23,33],$Vx=[2,78],$Vy=[1,107],$Vz=[1,92],$VA=[1,93],$VB=[1,97],$VC=[1,98],$VD=[1,94],$VE=[1,95],$VF=[1,96],$VG=[1,99],$VH=[1,100],$VI=[1,101],$VJ=[1,102],$VK=[1,103],$VL=[1,104],$VM=[1,105],$VN=[1,106],$VO=[1,108],$VP=[1,109],$VQ=[1,110],$VR=[1,111],$VS=[1,112],$VT=[1,113],$VU=[1,114],$VV=[1,115],$VW=[1,116],$VX=[1,117],$VY=[1,118],$VZ=[1,126],$V_=[1,124],$V$=[1,125],$V01=[4,5,7,8,11,15,22,27,29,32,36,44,45,47,48,49,50],$V11=[5,11,12,16,22,23,27,32,33,36,37,44,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],$V21=[1,127],$V31=[2,35],$V41=[2,13],$V51=[1,168];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"StringLiteral":3,"STRING_LITERAL":4,"&":5,"NumericLiteral":6,"INTEGER_LITERAL":7,"FLOAT_LITERAL":8,"IncludeDirective":9,"INCLUDE":10,"FILEPATH":11,";":12,"AnimtreeDirective":13,"USING_ANIMTREE":14,"(":15,")":16,"Block":17,"{":18,"StatementList":19,"}":20,"FormalParameterList":21,"IDENTIFIER":22,",":23,"FunctionParameterList":24,"Expression":25,"FunctionCall":26,"THREAD":27,"PointerExpression":28,"::":29,"FunctionExpression":30,"ObjectExpression":31,"FUNC_POINTER_BEGIN":32,"]":33,"ReferenceExpression":34,"MemberExpression":35,"[":36,".":37,"ElementList":38,"ListExpression":39,"LiteralExpression":40,"OptionalExpression":41,"BasicExpression":42,"OperatorPostfix":43,"++":44,"--":45,"OperatorPrefix":46,"+":47,"-":48,"~":49,"!":50,"OperatorMid":51,"*":52,"/":53,"%":54,"<<":55,">>":56,"<":57,"<=":58,">":59,">=":60,"==":61,"!=":62,"|":63,"&&":64,"||":65,"=":66,"+=":67,"-=":68,"*=":69,"/=":70,"&=":71,"^=":72,"|=":73,"e":74,"ExpressionStatement":75,"ReturnStatement":76,"RETURN":77,"WaitStatement":78,"WAIT":79,"EmptyStatement":80,"IfStatement":81,"IF":82,"Statement":83,"ELSE":84,"LoopStatement":85,"WHILE":86,"FOR":87,"BREAK":88,"CONTINUE":89,"FunctionDeclaration":90,"SourceElement":91,"SourceElements":92,"Program":93,"EOF":94,"$accept":0,"$end":1},
terminals_: {2:"error",4:"STRING_LITERAL",5:"&",7:"INTEGER_LITERAL",8:"FLOAT_LITERAL",10:"INCLUDE",11:"FILEPATH",12:";",14:"USING_ANIMTREE",15:"(",16:")",18:"{",20:"}",22:"IDENTIFIER",23:",",27:"THREAD",29:"::",32:"FUNC_POINTER_BEGIN",33:"]",36:"[",37:".",44:"++",45:"--",47:"+",48:"-",49:"~",50:"!",52:"*",53:"/",54:"%",55:"<<",56:">>",57:"<",58:"<=",59:">",60:">=",61:"==",62:"!=",63:"|",64:"&&",65:"||",66:"=",67:"+=",68:"-=",69:"*=",70:"/=",71:"&=",72:"^=",73:"|=",77:"RETURN",79:"WAIT",82:"IF",84:"ELSE",86:"WHILE",87:"FOR",88:"BREAK",89:"CONTINUE",94:"EOF"},
productions_: [0,[3,1],[3,2],[6,1],[6,1],[9,3],[13,5],[17,3],[21,1],[21,3],[21,0],[24,1],[24,3],[24,0],[26,4],[26,5],[26,4],[26,5],[26,6],[30,2],[30,1],[28,4],[34,2],[35,4],[35,3],[35,2],[38,3],[38,3],[39,3],[31,1],[31,1],[31,1],[40,1],[40,1],[41,1],[41,0],[42,1],[42,1],[42,1],[42,1],[43,1],[43,1],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[74,1],[74,2],[74,2],[74,3],[74,3],[25,1],[75,2],[76,2],[76,3],[78,3],[78,3],[78,5],[80,1],[81,5],[81,6],[81,2],[85,5],[85,9],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[83,2],[83,2],[83,1],[19,2],[19,0],[90,7],[91,1],[91,1],[91,1],[92,2],[92,0],[93,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			this.$ = $$[$0].substring(1, $$[$0].length-1);
		
break;
case 2:

			this.$ = $$[$0-1].substring(2, $$[$0-1].length-1);
		
break;
case 5:
this.$ = {"type": "include", "arg": $$[$0-1], "range": this._$};
break;
case 6:
this.$ = {"type": "animtree", "arg": $$[$0-2], "range": this._$};
break;
case 7:
this.$ = {"type": "block", "content": $$[$0-1], "range": this._$};;
break;
case 8: case 11:

			this.$ = [$$[$0]];
		
break;
case 9: case 12: case 27:

			this.$ = $$[$0-2].concat($$[$0]);
		
break;
case 10: case 13: case 35: case 107:

			this.$ = [];
		
break;
case 14: case 16:
this.$ = {"type": "call", "name": $$[$0-3], "params": $$[$0-1]};;
break;
case 15:
this.$ = {"type": "thread", "name": $$[$0-4], "params": $$[$0-1]};;
break;
case 17:
this.$ = {"type": "call", "name": $$[$0-4], "params": $$[$0-2]};;
break;
case 18:
this.$ = {"type": "call_external", "file": $$[$0-5], "name": $$[$0-3], "params": $$[$0-1]};;
break;
case 19:

			this.$ = $$[$0];
			this.$.caller = $$[$0-1];	
		
break;
case 22:
this.$ = {"type": "func_reference", "name": $$[$0]};;
break;
case 23:
this.$ = {"type": "array", "expression": $$[$0-3], "member": $$[$0-1]};
break;
case 24:
this.$ = {"type": "property", "expression": $$[$0-2], "member": $$[$0]};
break;
case 26:

			this.$ = [$$[$0-2], $$[$0]];
		
break;
case 28:
this.$ = {"type": "list", "elements": $$[$0-1]};
break;
case 74:
this.$ = {"A": $$[$0-1], "Postfix Op": $$[$0]};;
break;
case 75:
this.$ = {"A": $$[$0-1], "Prefix Op": $$[$0]};;
break;
case 76:
this.$ = {"A": $$[$0-2], "Mid Op": $$[$0-1], "B": $$[$0]};;
break;
case 77:
this.$ = {"A": $$[$0-2], "PARENS": $$[$0-1], "B": $$[$0]};;
break;
case 79:

			this.$ = $$[$0-1];
		
break;
case 80:
this.$ = {"type": "return"};;
break;
case 81:
this.$ = {"type": "return", "expression": $$[$0-1]};;
break;
case 86: case 87: case 88: case 89: case 90:

			this.$ = yytext;
		
break;
case 100:

			this.$ = $$[$0-1].concat($$[$0]);
		
break;
case 101:

			this.$ = [];	
		
break;
case 102:
this.$ = {"type": "function", "name": $$[$0-6], "params": $$[$0-4], "range": this._$, "statements": $$[$0-1]};;
break;
case 106:

			//for(var key in _$[$0]) $$[$0][key]=_$[$0][key];
            this.$ = $$[$0-1].concat($$[$0]);
		
break;
case 108:

		return this.$;
	
break;
}
},
table: [o($V0,[2,107],{93:1,92:2}),{1:[3]},{9:5,10:[1,8],13:6,14:[1,9],22:[1,10],90:7,91:4,94:[1,3]},{1:[2,108]},o($V0,[2,106]),o($V0,[2,103]),o($V0,[2,104]),o($V0,[2,105]),{11:[1,11]},{15:[1,12]},{15:[1,13]},{12:[1,14]},{3:15,4:$V1,5:$V2},o($V3,[2,10],{21:18,22:[1,19]}),o($V0,[2,5]),{16:[1,20]},o($V4,[2,1]),{4:[1,21]},{16:[1,22],23:[1,23]},o($V3,[2,8]),{12:[1,24]},o($V4,[2,2]),{18:[1,25]},{22:[1,26]},o($V0,[2,6]),o($V5,$V6,{19:27}),o($V3,[2,9]),{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,12:$Va,15:$Vb,17:30,18:$Vc,20:[1,28],22:$Vd,25:41,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48,75:32,76:35,77:$Vo,78:31,79:$Vp,80:38,81:33,82:$Vq,83:29,84:$Vr,85:34,86:$Vs,87:$Vt,88:$Vu,89:$Vv},o($V0,[2,102]),o($V5,[2,100]),o($V5,[2,91]),o($V5,[2,92]),o($V5,[2,93]),o($V5,[2,94]),o($V5,[2,95]),o($V5,[2,96]),{12:[1,76]},{12:[1,77]},o($V5,[2,99]),o($V5,$V6,{19:78}),{6:79,7:$V7,8:$V8,15:[1,81],22:[1,80]},{12:[1,82]},{15:[1,83]},{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,12:$Va,15:$Vb,17:30,18:$Vc,22:$Vd,25:41,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48,75:32,76:35,77:$Vo,78:31,79:$Vp,80:38,81:33,82:[1,84],83:85,84:$Vr,85:34,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{15:[1,86]},{15:[1,87]},{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,12:[1,88],15:$Vb,22:$Vd,25:89,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48},o($V5,[2,85]),o($Vw,$Vx,{43:90,51:91,5:$Vy,44:$Vz,45:$VA,47:$VB,48:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,69:$VU,70:$VV,71:$VW,72:$VX,73:$VY}),o($V4,[2,73]),{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:119},{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:122,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,38:121,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:120},o($V4,[2,36],{28:73,26:123,11:$V9,22:$VZ,27:$Ve,32:$Vg,36:$V_,37:$V$}),o($V4,[2,37]),o($V4,[2,38]),o($V4,[2,39]),o($V01,[2,42]),o($V01,[2,43]),o($V01,[2,44]),o($V01,[2,45]),o($V01,[2,46]),o($V01,[2,47]),o($V11,[2,29],{15:$V21}),o($V11,[2,30]),o($V11,[2,31]),{22:[1,128]},o($V4,[2,32]),o($V4,[2,33]),o($V11,[2,20]),{33:[1,129]},o($V4,[2,3]),o($V4,[2,4]),{22:[1,130],28:131,32:$Vg},{15:[1,132]},{29:[1,133]},{11:$V9,22:$Vd,26:68,27:$Ve,28:73,30:63,31:134,32:$Vg,35:64,36:$Vh},o($V5,[2,97]),o($V5,[2,98]),{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,12:$Va,15:$Vb,17:30,18:$Vc,20:[1,135],22:$Vd,25:41,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48,75:32,76:35,77:$Vo,78:31,79:$Vp,80:38,81:33,82:$Vq,83:29,84:$Vr,85:34,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{12:[1,136]},{12:[1,137]},{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:138,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48},o($V5,[2,79]),{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:139,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48},{15:[1,140]},o($V5,[2,88]),{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:141,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48},{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,12:$V31,15:$Vb,22:$Vd,25:143,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,41:142,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48},o($V5,[2,80]),{12:[1,144]},o($V4,[2,74]),{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:145},o($V4,[2,40]),o($V4,[2,41]),o($V01,[2,48]),o($V01,[2,49]),o($V01,[2,50]),o($V01,[2,51]),o($V01,[2,52]),o($V01,[2,53]),o($V01,[2,54]),o($V01,[2,55]),o($V01,[2,56]),o($V01,[2,57]),o($V01,[2,58]),o($V01,[2,59]),o($V01,[2,60]),o($V01,[2,61]),o($V01,[2,62]),o($V01,[2,63]),o($V01,[2,64]),o($V01,[2,65]),o($V01,[2,66]),o($V01,[2,67]),o($V01,[2,68]),o($V01,[2,69]),o($V01,[2,70]),o($V01,[2,71]),o($V01,[2,72]),o($Vw,[2,75],{43:90,51:91,5:$Vy,44:$Vz,45:$VA,47:$VB,48:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,69:$VU,70:$VV,71:$VW,72:$VX,73:$VY}),{5:$Vy,16:[1,146],23:$Vx,43:90,44:$Vz,45:$VA,47:$VB,48:$VC,51:91,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,69:$VU,70:$VV,71:$VW,72:$VX,73:$VY},{16:[1,147],23:[1,148]},{23:[1,149]},o($V11,[2,19]),{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:150,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48},{11:$V9,22:$Vd,26:68,27:$Ve,28:73,30:63,31:151,32:$Vg,35:64,36:$Vh},{15:$V21},o($V3,$V41,{74:48,42:49,46:50,31:52,34:53,40:54,39:55,30:63,35:64,6:66,3:67,26:68,28:73,24:152,25:153,4:$V1,5:$V2,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,27:$Ve,29:$Vf,32:$Vg,36:$Vh,44:$Vi,45:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn}),o($V4,[2,22]),o($V11,[2,25]),{15:[1,154]},{15:[1,155]},o($V3,$V41,{74:48,42:49,46:50,31:52,34:53,40:54,39:55,30:63,35:64,6:66,3:67,26:68,28:73,25:153,24:156,4:$V1,5:$V2,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,27:$Ve,29:$Vf,32:$Vg,36:$Vh,44:$Vi,45:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn}),{22:[1,157]},{11:$V9,22:$VZ,26:123,27:$Ve,28:73,32:$Vg,33:[1,158],36:$V_,37:$V$},o($V5,[2,7]),o($V5,[2,82]),o($V5,[2,83]),{16:[1,159]},{16:[1,160]},{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:161,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48},{16:[1,162]},{12:[1,163]},o([12,16],[2,34]),o($V5,[2,81]),o($Vw,[2,76],{43:90,51:91,5:$Vy,44:$Vz,45:$VA,47:$VB,48:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI,58:$VJ,59:$VK,60:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,69:$VU,70:$VV,71:$VW,72:$VX,73:$VY}),o($V4,[2,77]),o($V4,[2,28]),{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:164,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48},{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:165,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48},{33:[1,166]},o([5,12,16,23,33,36,37,44,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],[2,24],{28:73,26:123,11:$V9,22:$VZ,27:$Ve,32:$Vg}),{16:[1,167],23:$V51},o($V3,[2,11]),o($V3,$V41,{74:48,42:49,46:50,31:52,34:53,40:54,39:55,30:63,35:64,6:66,3:67,26:68,28:73,25:153,24:169,4:$V1,5:$V2,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,27:$Ve,29:$Vf,32:$Vg,36:$Vh,44:$Vi,45:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn}),o($V3,$V41,{74:48,42:49,46:50,31:52,34:53,40:54,39:55,30:63,35:64,6:66,3:67,26:68,28:73,25:153,24:170,4:$V1,5:$V2,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,27:$Ve,29:$Vf,32:$Vg,36:$Vh,44:$Vi,45:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn}),{16:[1,171],23:$V51},{15:[1,172]},{33:[1,173]},{12:[1,174]},{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,12:$Va,15:$Vb,17:30,18:$Vc,22:$Vd,25:41,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48,75:32,76:35,77:$Vo,78:31,79:$Vp,80:38,81:33,82:$Vq,83:175,84:$Vr,85:34,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{16:[1,176]},{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,12:$Va,15:$Vb,17:30,18:$Vc,22:$Vd,25:41,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48,75:32,76:35,77:$Vo,78:31,79:$Vp,80:38,81:33,82:$Vq,83:177,84:$Vr,85:34,86:$Vs,87:$Vt,88:$Vu,89:$Vv},{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,12:$V31,15:$Vb,22:$Vd,25:143,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,41:178,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48},o($V3,[2,27]),o($V3,[2,26]),o($V11,[2,23]),o($V11,[2,14]),{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,25:179,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48},{16:[1,180],23:$V51},{16:[1,181],23:$V51},o($V11,[2,16]),o($V3,$V41,{74:48,42:49,46:50,31:52,34:53,40:54,39:55,30:63,35:64,6:66,3:67,26:68,28:73,25:153,24:182,4:$V1,5:$V2,7:$V7,8:$V8,11:$V9,15:$Vb,22:$Vd,27:$Ve,29:$Vf,32:$Vg,36:$Vh,44:$Vi,45:$Vj,47:$Vk,48:$Vl,49:$Vm,50:$Vn}),{15:[2,21]},o($V5,[2,84]),o($V5,[2,86]),{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,12:$Va,15:$Vb,17:30,18:$Vc,22:$Vd,25:41,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48,75:32,76:35,77:$Vo,78:31,79:$Vp,80:38,81:33,82:$Vq,83:183,84:$Vr,85:34,86:$Vs,87:$Vt,88:$Vu,89:$Vv},o($V5,[2,89]),{12:[1,184]},o($V3,[2,12]),o($V11,[2,15]),o($V11,[2,17]),{16:[1,185],23:$V51},o($V5,[2,87]),{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,15:$Vb,16:$V31,22:$Vd,25:143,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,41:186,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48},o($V11,[2,18]),{16:[1,187]},{3:67,4:$V1,5:$V2,6:66,7:$V7,8:$V8,11:$V9,12:$Va,15:$Vb,17:30,18:$Vc,22:$Vd,25:41,26:68,27:$Ve,28:73,29:$Vf,30:63,31:52,32:$Vg,34:53,35:64,36:$Vh,39:55,40:54,42:49,44:$Vi,45:$Vj,46:50,47:$Vk,48:$Vl,49:$Vm,50:$Vn,74:48,75:32,76:35,77:$Vo,78:31,79:$Vp,80:38,81:33,82:$Vq,83:188,84:$Vr,85:34,86:$Vs,87:$Vt,88:$Vu,89:$Vv},o($V5,[2,90])],
defaultActions: {3:[2,108],173:[2,21]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip single line comments */	
break;
case 2:/* skip block comment */
break;
case 3:/* skip devscript (for now) */
break;
case 4:return 4
break;
case 5:return 8
break;
case 6:return 7
break;
case 7:return 15
break;
case 8:return 16
break;
case 9:return 32
break;
case 10:return 36
break;
case 11:return 33
break;
case 12:return 18
break;
case 13:return 20
break;
case 14:return 23
break;
case 15:return 37
break;
case 16:return 62
break;
case 17:return 50
break;
case 18:return 54
break;
case 19:return 61
break;
case 20:return 66
break;
case 21:return 55
break;
case 22:return 58
break;
case 23:return 57
break;
case 24:return 56
break;
case 25:return 60
break;
case 26:return 59
break;
case 27:return 44
break;
case 28:return 67
break;
case 29:return 47
break;
case 30:return 45
break;
case 31:return 68
break;
case 32:return 48
break;
case 33:return 69
break;
case 34:return 52
break;
case 35:return 70
break;
case 36:return 53
break;
case 37:return 65
break;
case 38:return 73
break;
case 39:return 63
break;
case 40:return 64
break;
case 41:return 71
break;
case 42:return 5
break;
case 43:return 72
break;
case 44:return '^'
break;
case 45:return 49
break;
case 46:return 29
break;
case 47:return 12
break;
case 48:return '?'
break;
case 49:return 82
break;
case 50:return 84
break;
case 51:return 'SWITCH'
break;
case 52:return 'CASE'
break;
case 53:return 88
break;
case 54:return 87
break;
case 55:return 86
break;
case 56:return 89
break;
case 57:return 77
break;
case 58:return 27
break;
case 59:return 79
break;
case 60:return 10
break;
case 61:return 14
break;
case 62:return 11
break;
case 63:return 22
break;
case 64:return 94
break;
case 65:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*(.|\n|\r)*?\*\/)/,/^(?:\/#(.|\n|\r)*?#\/)/,/^(?:(".*?"|'.*?'))/,/^(?:\d+\.(?:\d*)?f?|\.\d+f?)/,/^(?:\d+)/,/^(?:\()/,/^(?:\))/,/^(?:\[\s*\[)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:!=)/,/^(?:!)/,/^(?:%)/,/^(?:==)/,/^(?:=)/,/^(?:<<)/,/^(?:<=)/,/^(?:<)/,/^(?:>>)/,/^(?:>=)/,/^(?:>)/,/^(?:\+\+)/,/^(?:\+=)/,/^(?:\+)/,/^(?:--)/,/^(?:-=)/,/^(?:-)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:\|\|)/,/^(?:\|=)/,/^(?:\|)/,/^(?:&&)/,/^(?:&=)/,/^(?:&)/,/^(?:\^=)/,/^(?:\^)/,/^(?:~)/,/^(?:::)/,/^(?:;)/,/^(?:\?)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:break\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:thread\b)/,/^(?:wait\b)/,/^(?:#include\b)/,/^(?:#using_animtree\b)/,/^(?:(\w+[\/\\])+\w+)/,/^(?:_?[a-zA-Z\-_]\w*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = codscript;
exports.Parser = codscript.Parser;
exports.parse = function () { return codscript.parse.apply(codscript, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}