// IW5 GSC SOURCE
// Generated by https://github.com/xensik/gsc-tool

main()
{
    maps\mp\gametypes\_globallogic::init();
    maps\mp\gametypes\_callbacksetup::setupcallbacks();
    maps\mp\gametypes\_globallogic::setupcallbacks();

    if ( isusingmatchrulesdata() )
    {
        level.initializematchrules = ::initializematchrules;
        [[ level.initializematchrules ]]();
        level thread maps\mp\_utility::reinitializematchrulesonmigration();
    }
    else
    {
        maps\mp\_utility::registertimelimitdvar( level.gametype, 10 );
        maps\mp\_utility::registerscorelimitdvar( level.gametype, 0 );
        maps\mp\_utility::registerroundlimitdvar( level.gametype, 1 );
        maps\mp\_utility::registerwinlimitdvar( level.gametype, 1 );
        maps\mp\_utility::registernumlivesdvar( level.gametype, 2 );
        maps\mp\_utility::registerhalftimedvar( level.gametype, 0 );
        level.matchrules_damagemultiplier = 0;
        level.matchrules_vampirism = 0;
        level.matchrules_oneshotkill = 0;
        level.matchrules_initialammo = 2;
        level.matchrules_rewardammo = 2;
    }

    setgun();
    setspecialloadouts();
    level.teambased = 0;
    level.doprematch = 1;
    level.onstartgametype = ::onstartgametype;
    level.onspawnplayer = ::onspawnplayer;
    level.getspawnpoint = ::getspawnpoint;
    level.onplayerkilled = ::onplayerkilled;
    level.ononeleftevent = ::ononeleftevent;

    if ( level.matchrules_oneshotkill )
        level.modifyplayerdamage = ::modifyplayerdamage;
}

initializematchrules()
{
    maps\mp\_utility::setcommonrulesfrommatchrulesdata( 1 );
    level.matchrules_initialammo = getmatchrulesdata( "oicData", "initialAmmoCount" );
    level.matchrules_rewardammo = getmatchrulesdata( "oicData", "killRewardAmmoCount" );
    level.matchrules_oneshotkill = getmatchrulesdata( "oicData", "oneShotKill" );
    level.matchrules_damagemultiplier = 0;
    level.matchrules_vampirism = 0;
    setdynamicdvar( "scr_oic_winlimit", 1 );
    maps\mp\_utility::registerwinlimitdvar( "oic", 1 );
    setdynamicdvar( "scr_oic_roundlimit", 1 );
    maps\mp\_utility::registerroundlimitdvar( "oic", 1 );
    setdynamicdvar( "scr_oic_halftime", 0 );
    maps\mp\_utility::registerhalftimedvar( "oic", 0 );
    setdynamicdvar( "scr_oic_promode", 0 );
    setdynamicdvar( "scr_oic_playerrespawndelay", 0 );
    setdynamicdvar( "scr_oic_waverespawndelay", 0 );
    setdynamicdvar( "scr_player_forcerespawn", 1 );
    setdynamicdvar( "scr_player_maxhealth", 100 );
    setdynamicdvar( "scr_game_onlyheadshots", 0 );
    setdynamicdvar( "scr_player_healthregentime", 5 );

    if ( maps\mp\_utility::matchmakinggame() )
    {
        setdynamicdvar( "scr_game_hardpoints", 1 );
        setdynamicdvar( "scr_game_perks", 1 );
    }
    else
        setdynamicdvar( "scr_game_hardpoints", 0 );
}

onstartgametype()
{
    setclientnamemode( "auto_change" );
    maps\mp\_utility::setobjectivetext( "allies", &"OBJECTIVES_OIC" );
    maps\mp\_utility::setobjectivetext( "axis", &"OBJECTIVES_OIC" );

    if ( level.splitscreen )
    {
        maps\mp\_utility::setobjectivescoretext( "allies", &"OBJECTIVES_OIC" );
        maps\mp\_utility::setobjectivescoretext( "axis", &"OBJECTIVES_OIC" );
    }
    else
    {
        maps\mp\_utility::setobjectivescoretext( "allies", &"OBJECTIVES_OIC_SCORE" );
        maps\mp\_utility::setobjectivescoretext( "axis", &"OBJECTIVES_OIC_SCORE" );
    }

    maps\mp\_utility::setobjectivehinttext( "allies", &"OBJECTIVES_OIC_HINT" );
    maps\mp\_utility::setobjectivehinttext( "axis", &"OBJECTIVES_OIC_HINT" );
    level.spawnmins = ( 0, 0, 0 );
    level.spawnmaxs = ( 0, 0, 0 );
    maps\mp\gametypes\_spawnlogic::addspawnpoints( "allies", "mp_dm_spawn" );
    maps\mp\gametypes\_spawnlogic::addspawnpoints( "axis", "mp_dm_spawn" );
    level.mapcenter = maps\mp\gametypes\_spawnlogic::findboxcenter( level.spawnmins, level.spawnmaxs );
    setmapcenter( level.mapcenter );
    var_0 = [];
    maps\mp\gametypes\_gameobjects::main( var_0 );

    if ( maps\mp\_utility::matchmakinggame() )
        maps\mp\_equipment::createkilltriggers();

    maps\mp\gametypes\_rank::registerscoreinfo( "kill_bonus", 50 );
    maps\mp\gametypes\_rank::registerscoreinfo( "kill", 100 );
    maps\mp\gametypes\_rank::registerscoreinfo( "survivor", 20 );
    maps\mp\gametypes\_rank::registerscoreinfo( "assist", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "suicide", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "teamkill", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "headshot", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "execution", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "avenger", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "defender", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "posthumous", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "revenge", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "double", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "triple", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "multi", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "buzzkill", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "firstblood", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "comeback", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "longshot", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "assistedsuicide", 0 );
    maps\mp\gametypes\_rank::registerscoreinfo( "knifethrow", 0 );
    level.quickmessagetoall = 1;
    level.blockweapondrops = 1;

    if ( maps\mp\_utility::matchmakinggame() )
    {
        level.killstreakrewards = 1;
        level thread finalthreeuav();
    }
    else
        level.killstreakrewards = 0;

    level thread onplayerconnect();
}

onplayerconnect()
{
    for (;;)
    {
        level waittill( "connected", var_0 );
        var_0.oic_firstspawn = 1;
        var_0.oic_hasspawned = 0;
        var_0.oichud_button = undefined;
        var_0.oichud_text = undefined;
        var_0.oichud_name = undefined;
    }
}

getspawnpoint()
{
    if ( self.oic_firstspawn )
    {
        self.oic_firstspawn = 0;
        self.pers["class"] = "gamemode";
        self.pers["lastClass"] = "";
        self.class = self.pers["class"];
        self.lastclass = self.pers["lastClass"];

        if ( common_scripts\utility::cointoss() )
            maps\mp\gametypes\_menus::addtoteam( "axis", 1 );
        else
            maps\mp\gametypes\_menus::addtoteam( "allies", 1 );

        thread movelatejoinerstospectators();
    }

    var_0 = maps\mp\gametypes\_spawnlogic::getteamspawnpoints( self.pers["team"] );
    var_1 = maps\mp\gametypes\_spawnlogic::getspawnpoint_dm( var_0 );
    return var_1;
}

movelatejoinerstospectators()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    maps\mp\_utility::gameflagwait( "prematch_done" );
    maps\mp\_utility::gameflagwait( "graceperiod_done" );
    maps\mp\gametypes\_hostmigration::waitlongdurationwithhostmigrationpause( 5 );

    if ( !self.oic_hasspawned )
    {
        self notify( "used_predicted_spawnpoint" );
        maps\mp\gametypes\_menus::addtoteam( "spectator", 1 );

        if ( level.console && maps\mp\_utility::matchmakinggame() )
            thread playerwager( 0 );
    }
}

onspawnplayer()
{
    if ( isdefined( self.oic_rewardammo ) && self.oic_rewardammo )
        giveammo();
    else
        self.oic_rewardammo = 0;

    self.pers["gamemodeLoadout"] = level.oic_loadouts[self.pers["team"]];
    thread waitloadoutdone();
    level notify( "spawned_player" );
}

waitloadoutdone()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self waittill( "spawned_player" );
    self takeallweapons();
    maps\mp\_utility::giveperk( "specialty_bling", 0 );
    var_0 = addattachments( level.oic_gun );
    maps\mp\_utility::_giveweapon( var_0 );
    self switchtoweapon( var_0 );
    self setspawnweapon( var_0 );
    var_1 = strtok( var_0, "_" );

    if ( var_1[0] == "iw5" )
        var_2 = var_1[0] + "_" + var_1[1];
    else if ( var_1[0] == "alt" )
        var_2 = var_1[1] + "_" + var_1[2];
    else
        var_2 = var_1[0];

    self.pers["primaryWeapon"] = var_2;
    self.primaryweapon = var_0;
    var_3 = weaponclipsize( var_0 );

    if ( level.matchrules_initialammo > var_3 )
    {
        self setweaponammoclip( self.primaryweapon, var_3 );
        self setweaponammostock( self.primaryweapon, level.matchrules_initialammo - var_3 );
    }
    else
    {
        self setweaponammoclip( self.primaryweapon, level.matchrules_initialammo );
        self setweaponammostock( self.primaryweapon, 0 );
    }

    if ( maps\mp\_utility::matchmakinggame() )
    {
        thread removescavenger();
        wait 0.05;

        if ( !maps\mp\_utility::_hasperk( "specialty_fastmantle" ) )
            maps\mp\_utility::giveperk( "specialty_fastmantle", 0 );

        if ( !maps\mp\_utility::_hasperk( "specialty_assists" ) )
            maps\mp\_utility::giveperk( "specialty_assists", 0 );

        if ( !maps\mp\_utility::_hasperk( "specialty_falldamage" ) )
            maps\mp\_utility::giveperk( "specialty_falldamage", 0 );
    }

    self.oic_hasspawned = 1;
}

addattachments( var_0 )
{
    if ( isdefined( level.gun_attachments[var_0] ) && isdefined( level.gun_attachments[var_0]["attach1"] ) )
        var_1 = level.gun_attachments[var_0]["attach1"];
    else
        var_1 = "none";

    if ( isdefined( level.gun_attachments[var_0] ) && isdefined( level.gun_attachments[var_0]["attach2"] ) )
        var_2 = level.gun_attachments[var_0]["attach2"];
    else
        var_2 = "none";

    var_3 = maps\mp\gametypes\_class::buildweaponname( var_0, var_1, var_2, 0, 0 );
    return var_3;
}

modifyplayerdamage( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7 )
{
    if ( var_3 == "MOD_PISTOL_BULLET" || var_3 == "MOD_RIFLE_BULLET" || var_3 == "MOD_HEAD_SHOT" )
        var_2 = 999;

    return var_2;
}

onplayerkilled( var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9 )
{
    if ( isdefined( var_1 ) && isplayer( var_1 ) && self != var_1 )
    {
        var_1.oic_rewardammo = var_1.oic_rewardammo + level.matchrules_rewardammo;

        if ( self attackbuttonpressed() )
            var_1 thread waitgiveammo();
        else
            var_1 giveammo();

        if ( maps\mp\_utility::getgametypenumlives() && self.pers["deaths"] == maps\mp\_utility::getgametypenumlives() )
            eliminateplayer();

        if ( level.console && maps\mp\_utility::matchmakinggame() )
        {
            foreach ( var_11 in level.players )
            {
                if ( isdefined( var_11.sessionstate ) && ( var_11.sessionstate == "spectator" || var_11.sessionstate == "spectating" ) && isdefined( var_11.wagingplayer ) && var_11.wagingplayer == var_1.name )
                {
                    var_11 thread maps\mp\gametypes\_rank::xpeventpopup( &"SPLASHES_PROXIMITYKILL" );
                    var_11 thread maps\mp\gametypes\_rank::giverankxp( "kill_bonus" );
                }
            }
        }
    }
}

ononeleftevent( var_0 )
{
    var_1 = maps\mp\_utility::getlastlivingplayer();
    logstring( "last one alive, win: " + var_1.name );
    level.finalkillcam_winner = "none";
    level thread maps\mp\gametypes\_gamelogic::endgame( var_1, &"MP_ENEMIES_ELIMINATED" );
}

waitgiveammo()
{
    self endon( "death" );
    self endon( "disconnect" );
    level endon( "game_ended" );
    self notify( "oic_waitGiveAmmo" );
    self endon( "oic_waitGiveAmmo" );

    while ( self attackbuttonpressed() )
        wait 0.05;

    giveammo();
}

giveammo()
{
    var_0 = self getcurrentweapon();
    var_1 = self getweaponammostock( var_0 );
    var_2 = self getweaponammoclip( var_0 );
    var_3 = weaponclipsize( var_0 );

    if ( var_2 + self.oic_rewardammo > var_3 )
    {
        self setweaponammoclip( var_0, var_3 );
        self setweaponammostock( var_0, var_1 + var_2 + self.oic_rewardammo - var_3 );
    }
    else
        self setweaponammoclip( var_0, var_2 + self.oic_rewardammo );

    self playlocalsound( "scavenger_pack_pickup" );
    self.oic_rewardammo = 0;
}

eliminateplayer()
{
    if ( level.console && maps\mp\_utility::matchmakinggame() )
        thread playerwager( 1 );

    thread maps\mp\_utility::teamplayercardsplash( "callout_eliminated", self );
    var_0 = [];

    foreach ( var_2 in level.players )
    {
        if ( var_2.pers["deaths"] < maps\mp\_utility::getgametypenumlives() && var_2.oic_hasspawned )
        {
            var_0[var_0.size] = var_2;
            var_2 thread maps\mp\gametypes\_rank::xpeventpopup( &"SPLASHES_SURVIVOR" );
            maps\mp\gametypes\_gamescore::giveplayerscore( "survivor", var_2, undefined, 1 );
            var_2 thread maps\mp\gametypes\_rank::giverankxp( "survivor" );
            continue;
        }

        if ( isdefined( var_2.wagingplayer ) && var_2.wagingplayer == self.name )
            var_2.oichud_name settext( " " );
    }

    if ( var_0.size > 2 )
        maps\mp\_utility::playsoundonplayers( "mp_enemy_obj_captured" );
    else if ( var_0.size == 2 )
    {
        maps\mp\_utility::playsoundonplayers( "mp_obj_captured" );
        var_0[0] thread maps\mp\gametypes\_hud_message::playercardsplashnotify( "callout_lastenemyalive", var_0[1] );
        var_0[1] thread maps\mp\gametypes\_hud_message::playercardsplashnotify( "callout_lastenemyalive", var_0[0] );
    }
}

playerwager( var_0 )
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    if ( var_0 )
        wait 7;

    self.oichud_button = createhudelem( "^3[{+usereload}]^7", 1.4, ( 0.8, 0.8, 0.8 ), 0, -50, 100 );
    self.oichud_text = createhudelem( &"MENU_SELECT", 1.6, ( 0.8, 0.8, 0.8 ), 0, -27, 99 );
    self.oichud_name = createhudelem( " ", 1.75, ( 0.25, 0.75, 0.25 ), 0.75, -23, 122 );
    thread hidebuttonsonfreespectate();
    self notifyonplayercommand( "selected_player", "+usereload" );

    for (;;)
    {
        self waittill( "selected_player" );
        var_1 = self getspectatingplayer();

        if ( isdefined( var_1 ) )
        {
            self.wagingplayer = var_1.name;
            self.oichud_name settext( var_1.name );
            self playlocalsound( "recondrone_lockon" );
        }
    }
}

createhudelem( var_0, var_1, var_2, var_3, var_4, var_5 )
{
    var_6 = maps\mp\gametypes\_hud_util::createfontstring( "small", var_1 );
    var_6 settext( var_0 );

    if ( self issplitscreenplayer() )
        var_5 = var_5 - 35;

    var_6 maps\mp\gametypes\_hud_util::setpoint( "TOPLEFT", "CENTER", var_4, var_5 );
    var_6.alpha = 0;
    var_6.color = var_2;
    var_6.glowcolor = var_2;
    var_6.glowalpha = var_3;
    var_6.archived = 0;
    var_6.hidewheninmenu = 1;
    level thread hidehudelementongameend( var_6 );
    return var_6;
}

hidebuttonsonfreespectate()
{
    level endon( "game_ended" );
    self endon( "disconnect" );

    for (;;)
    {
        var_0 = self getspectatingplayer();

        if ( isdefined( var_0 ) )
        {
            self.oichud_button.alpha = 1;
            self.oichud_text.alpha = 1;
            self.oichud_name.alpha = 1;
        }
        else
        {
            self.oichud_button.alpha = 0;
            self.oichud_text.alpha = 0;
            self.oichud_name.alpha = 0;
        }

        wait 0.05;
    }
}

hidehudelementongameend( var_0 )
{
    level waittill( "game_ended" );

    if ( isdefined( var_0 ) )
        var_0.alpha = 0;
}

removescavenger()
{
    level endon( "game_ended" );
    self endon( "disconnect" );
    self endon( "death" );

    for (;;)
    {
        if ( maps\mp\_utility::_hasperk( "specialty_scavenger" ) )
            maps\mp\_utility::_unsetperk( "specialty_scavenger" );

        wait 0.05;
    }
}

finalthreeuav()
{
    level endon( "game_ended" );
    maps\mp\_utility::gameflagwait( "prematch_done" );
    maps\mp\_utility::gameflagwait( "graceperiod_done" );

    for (;;)
    {
        var_0 = [];

        foreach ( var_2 in level.players )
        {
            if ( var_2.pers["deaths"] < maps\mp\_utility::getgametypenumlives() && var_2.oic_hasspawned )
                var_0[var_0.size] = var_2;
        }

        if ( var_0.size < 4 )
        {
            foreach ( var_2 in var_0 )
                var_2 setclientdvars( "g_compassShowEnemies", 1 );

            setdynamicdvar( "scr_game_forceuav", 1 );
            break;
        }

        wait 0.5;
    }
}

setgun()
{
    level.oic_gun = undefined;
    var_0 = "none";

    if ( isusingmatchrulesdata() )
        var_0 = getmatchrulesdata( "oicData", "weapon" );

    if ( isdefined( var_0 ) && var_0 != "none" )
        level.oic_gun = var_0;
    else
        level.oic_gun = "iw5_deserteagle";

    if ( level.oic_gun == "iw5_type95" || level.oic_gun == "iw5_m16" )
    {
        level.matchrules_initialammo = level.matchrules_initialammo * 3;
        level.matchrules_rewardammo = level.matchrules_rewardammo * 3;
    }
}

setspecialloadouts()
{
    level.oic_loadouts["axis"]["loadoutPrimary"] = "iw5_acr";
    level.oic_loadouts["axis"]["loadoutPrimaryAttachment"] = "none";
    level.oic_loadouts["axis"]["loadoutPrimaryAttachment2"] = "none";
    level.oic_loadouts["axis"]["loadoutPrimaryBuff"] = "specialty_null";
    level.oic_loadouts["axis"]["loadoutPrimaryCamo"] = "none";
    level.oic_loadouts["axis"]["loadoutPrimaryReticle"] = "none";
    level.oic_loadouts["axis"]["loadoutSecondary"] = "none";
    level.oic_loadouts["axis"]["loadoutSecondaryAttachment"] = "none";
    level.oic_loadouts["axis"]["loadoutSecondaryAttachment2"] = "none";
    level.oic_loadouts["axis"]["loadoutSecondaryBuff"] = "specialty_null";
    level.oic_loadouts["axis"]["loadoutSecondaryCamo"] = "none";
    level.oic_loadouts["axis"]["loadoutSecondaryReticle"] = "none";
    level.oic_loadouts["axis"]["loadoutEquipment"] = "specialty_null";
    level.oic_loadouts["axis"]["loadoutOffhand"] = "none";

    if ( maps\mp\_utility::matchmakinggame() )
    {
        level.oic_loadouts["axis"]["loadoutPerk1"] = "specialty_longersprint";
        level.oic_loadouts["axis"]["loadoutPerk2"] = "specialty_hardline";
        level.oic_loadouts["axis"]["loadoutPerk3"] = "specialty_null";
        level.oic_loadouts["axis"]["loadoutStreakType"] = "streaktype_specialist";
        level.oic_loadouts["axis"]["loadoutKillstreak1"] = "specialty_quickdraw_ks";
        level.oic_loadouts["axis"]["loadoutKillstreak2"] = "specialty_stalker_ks";
        level.oic_loadouts["axis"]["loadoutKillstreak3"] = "specialty_bulletaccuracy_ks";
        level.oic_loadouts["axis"]["loadoutDeathstreak"] = "specialty_juiced";
    }
    else
    {
        level.oic_loadouts["axis"]["loadoutPerk1"] = "specialty_null";
        level.oic_loadouts["axis"]["loadoutPerk2"] = "specialty_null";
        level.oic_loadouts["axis"]["loadoutPerk3"] = "specialty_null";
        level.oic_loadouts["axis"]["loadoutDeathstreak"] = "specialty_null";
    }

    level.oic_loadouts["axis"]["loadoutJuggernaut"] = 0;
    level.oic_loadouts["allies"] = level.oic_loadouts["axis"];
    level.gun_attachments = [];
    level.gun_attachments["iw5_usp45"]["attach1"] = "tactical";
    level.gun_attachments["iw5_p99"]["attach1"] = "tactical";
    level.gun_attachments["iw5_fnfiveseven"]["attach1"] = "tactical";
    level.gun_attachments["iw5_44magnum"]["attach1"] = "tactical";
    level.gun_attachments["iw5_deserteagle"]["attach1"] = "tactical";
    level.gun_attachments["iw5_mp412"]["attach1"] = "tactical";
    level.gun_attachments["iw5_fmg9"]["attach1"] = "reflex";
    level.gun_attachments["iw5_skorpion"]["attach1"] = "reflex";
    level.gun_attachments["iw5_mp9"]["attach1"] = "reflex";
    level.gun_attachments["iw5_g18"]["attach1"] = "reflex";
    level.gun_attachments["iw5_mp5"]["attach1"] = "reflex";
    level.gun_attachments["iw5_m9"]["attach1"] = "reflex";
    level.gun_attachments["iw5_p90"]["attach1"] = "reflex";
    level.gun_attachments["iw5_pp90m1"]["attach1"] = "reflex";
    level.gun_attachments["iw5_ump45"]["attach1"] = "reflex";
    level.gun_attachments["iw5_mp7"]["attach1"] = "reflex";
    level.gun_attachments["iw5_ak47"]["attach1"] = "reflex";
    level.gun_attachments["iw5_m16"]["attach1"] = "reflex";
    level.gun_attachments["iw5_m4"]["attach1"] = "reflex";
    level.gun_attachments["iw5_fad"]["attach1"] = "reflex";
    level.gun_attachments["iw5_acr"]["attach1"] = "reflex";
    level.gun_attachments["iw5_type95"]["attach1"] = "reflex";
    level.gun_attachments["iw5_mk14"]["attach1"] = "reflex";
    level.gun_attachments["iw5_scar"]["attach1"] = "reflex";
    level.gun_attachments["iw5_g36c"]["attach1"] = "reflex";
    level.gun_attachments["iw5_cm901"]["attach1"] = "reflex";
    level.gun_attachments["iw5_ksg"]["attach1"] = "grip";
    level.gun_attachments["iw5_striker"]["attach1"] = "grip";
    level.gun_attachments["iw5_aa12"]["attach1"] = "grip";
    level.gun_attachments["iw5_usas12"]["attach1"] = "grip";
    level.gun_attachments["iw5_spas12"]["attach1"] = "grip";
    level.gun_attachments["iw5_m60"]["attach1"] = "grip";
    level.gun_attachments["iw5_m60"]["attach2"] = "reflex";
    level.gun_attachments["iw5_mk46"]["attach1"] = "grip";
    level.gun_attachments["iw5_mk46"]["attach2"] = "reflex";
    level.gun_attachments["iw5_pecheneg"]["attach1"] = "grip";
    level.gun_attachments["iw5_pecheneg"]["attach2"] = "reflex";
    level.gun_attachments["iw5_sa80"]["attach1"] = "grip";
    level.gun_attachments["iw5_sa80"]["attach2"] = "reflex";
    level.gun_attachments["iw5_mg36"]["attach1"] = "grip";
    level.gun_attachments["iw5_mg36"]["attach2"] = "reflex";
}
