{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Game Script Code",
	"patterns": [
		{
			"include": "#include"
		},
		{
			"include": "#define"
		},
		{
			"include": "#using_animtree"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#block"
		}
	],
	"repository": {
		"include": {
			"begin": "^(#include\\b)\\s*([^;]*);?$",
			"beginCaptures": {
				"1": { "name": "invalid.gsc" },
				"2": { "name": "constant.gsc" }
			},
			"end": "\\s"
		},
		"define": {
			"begin": "^(#define\\b)\\s*([^\\s]+)\\s+(.+)$",
			"beginCaptures": {
				"1": { "name": "invalid.gsc" },
				"2": { "name": "constant.gsc" },
				"3": {
					"patterns": [
					  {
						"include": "#data_types"
					  }
					]
				}
			},
			"end": "\\s"
		},
		"using_animtree": {
			"name": "support.function.gsc",
			"match": "^#using_animtree(?=\\()$"
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.line.gsc",
					"match": "//.*$"
				},
				{
					"name": "comment.block.gsc",
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.gsc"
						}}
				}
			]
		},
		"string": {
			"name": "string.quoted.double.gsc",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.gsc",
					"match": "\\\\."
				}
			]
		},
		"number": {
			"name": "constant.character.escape.gsc",
			"match": "(?<!\\w)(?:-?(?:0|[1-9]\\d*)(?:\\.\\d+)?|\\.\\d+)(?:[eE][+-]?\\d+)?(?!\\w)"
		},
		"boolean": {
			"name": "keyword.variables.gsc",
			"match": "(?<!\\.)(?<!\\w)(true|false)(?!\\w)(?!\\.)"
		},
		"undefined": {
			"name": "keyword.variables.gsc",
			"match": "(?<!\\.)(?<!\\w)(undefined)(?!\\w)(?!\\.)"
		},
		"entity": {
			"name": "keyword.control.gsc",
			"match": "\\b(self|level)\\.?\\b"
		},
		"data_types": {
			"patterns": [	
				{
					"include": "#string"
				},
				{
					"include": "#number"
				},
				{
					"include": "#boolean"
				},
				{
					"include": "#undefined"
				},
				{
					"include": "#entity"
				},
				{
					"include": "#array"
				},
				{
					"include": "#vector"
				}
			]
		},
		"array": {
			"patterns": [
				{
					"name": "meta.array.gsc",
					"begin": "\\[",
					"beginCaptures": { "0": { "name": "punctuation.array.start.gsc" } },
					"end": "\\]",
					"endCaptures": { "0": { "name": "punctuation.array.end.gsc" } },
					"patterns": [
							{
								"include": "#data_types"
							},
							{
								"include": "#struct_field"
							},
							{
								"include": "#function"
							}
						]
				}
			]
		},
		"vector": {
			"patterns": [
				{
					"name": "meta.vector.gsc",
					"begin": "\\(",
					"beginCaptures": { "0": { "name": "punctuation.vector.start.gsc" } },
					"end": "\\)",
					"endCaptures": { "0": { "name": "punctuation.vector.end.gsc" } },
					"patterns": [
							{
								"include": "#number"
							},
							{
								"include": "#struct_field"
							},
							{
								"include": "#function"
							}
						]
				}
			]
		},
		"variable_declaration": {
			"match": "\\b([a-zA-Z0-9_]\\w*)\\b(?=\\s*([-\\+\\*\\/%])?=)\\s*([^\\/]+?);\\s*($|//.*$)",
			"captures": 
				{
					"1": { "name": "support.variable.gsc" },
					"3": { "patterns": [
							{
								"include": "#data_types"
							},
							{
								"include": "#struct_field"
							},
							{
								"include": "#function"
							}
						]},
					"4": { "name": "comment.line.gsc" }
				}
		},
		"struct_field": {
			"match": "([a-zA-Z0-9_]\\w*)\\.([a-zA-Z0-9_]\\w*)",
			"captures": 
				{
					"1": { "name": "keyword.control.refvariable.gsc" },
					"2": { "name": "variable.parameter.refvariable.gsc" }
				}
		},
		"function": {
			"patterns": [
				{
					"match": "([a-zA-Z0-9_]\\w*\\s)?((?<!\\.)(?<!\\w)thread\\s)?([a-zA-Z0-9_]\\w*)(?=\\(.*?\\))",
					"captures": 
					{
						"1": { "name": "invalid.gsc" },
						"2": { "name": "keyword.control.gsc" },
						"3": { "name": "support.function.gsc" }
					}
				},
				{
					"match": "([a-zA-Z0-9_]\\w*\\s)?((?<!\\.)(?<!\\w)thread\\s)?(\\:\\:)([a-zA-Z0-9_]\\w*)(?=\\(.*?\\))",
					"captures": 
					{
						"1": { "name": "invalid.gsc" },
						"2": { "name": "keyword.control.gsc" },
						"3": { "name": "support.function.gsc" }
					}
				},
				{
					"match": "([a-zA-Z0-9_]\\w*\\s)?((?<!\\.)(?<!\\w)thread\\s)?\\[\\[([a-zA-Z0-9_]\\w*)\\]\\](?=\\(.*?\\))",
					"captures": 
					{
						"1": { "name": "invalid.gsc" },
						"2": { "name": "keyword.control.gsc" },
						"3": { "name": "support.function.gsc" }
					}
				}
			]
		},
		"statement": {
			"name": "keyword.control.gsc",
			"match": "(?<!\\.)(?<!\\w)(return|break|continue|wait)(?!\\w)(?!\\.)"
		},
		"statement_block": {
			"patterns": [
				{
					"name": "meta.block.gsc",
					"begin": "\\b(if|else|switch|case|while|for|foreach)\\b",
					"beginCaptures": { "0": { "name": "keyword.control.gsc" } },
					"end": "\\}",
					"endCaptures": { "0": { "name": "punctuation.section.block.end.gsc" } },
					"patterns": [ { "include": "#block_innards" } ]
				}
			]
		},
		"block": {
			"patterns": [
				{
					"name": "meta.block.gsc",
					"begin": "^([a-zA-Z0-9_]\\w*)(?=\\(.*?\\)\\s*(?://.*?$)?)",
					"beginCaptures": { "1": { "name": "support.function.gsc" } },
					"end": "\\}",
					"endCaptures": { "0": { "name": "punctuation.section.block.end.gsc" } },
					"patterns": [ { "include": "#block_innards" }]
				}
			]
		},
		"block_innards": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#data_types"
				},
				{
					"include": "#variable_declaration"
				},
				{
					"include": "#struct_field"
				},
				{
					"include": "#function"
				},
				{
					"include": "#statement"
				},
				{
					"include": "#statement_block"
				},				
				{
					"include": "$base"
				}
			]
		}
	},
	"scopeName": "source.gsc"
}